
PublishCompass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000922  000009b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080014e  0080014e  00000a04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bf  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e2  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e0  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00001cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000330  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000771  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  9e:	0c 94 8f 04 	jmp	0x91e	; 0x91e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
  a6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	80 93 b8 00 	sts	0x00B8, r24
  b0:	08 95       	ret

000000b2 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  b6:	ec eb       	ldi	r30, 0xBC	; 188
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
  bc:	a9 eb       	ldi	r26, 0xB9	; 185
  be:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
  c0:	cb eb       	ldi	r28, 0xBB	; 187
  c2:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
  c4:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  c6:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  c8:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
  ca:	90 81       	ld	r25, Z
  cc:	99 23       	and	r25, r25
  ce:	ec f7       	brge	.-6      	; 0xca <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
  d0:	9c 91       	ld	r25, X
  d2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_start_wait+0x2a>
  d8:	90 31       	cpi	r25, 0x10	; 16
  da:	b1 f7       	brne	.-20     	; 0xc8 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
  dc:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
  de:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
  e0:	90 81       	ld	r25, Z
  e2:	99 23       	and	r25, r25
  e4:	ec f7       	brge	.-6      	; 0xe0 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
  e6:	9c 91       	ld	r25, X
  e8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
  ea:	90 32       	cpi	r25, 0x20	; 32
  ec:	11 f0       	breq	.+4      	; 0xf2 <i2c_start_wait+0x40>
  ee:	98 35       	cpi	r25, 0x58	; 88
  f0:	29 f4       	brne	.+10     	; 0xfc <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  f2:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
  f4:	90 81       	ld	r25, Z
  f6:	94 fd       	sbrc	r25, 4
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <i2c_start_wait+0x42>
  fa:	e6 cf       	rjmp	.-52     	; 0xc8 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 102:	84 e9       	ldi	r24, 0x94	; 148
 104:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	84 fd       	sbrc	r24, 4
 110:	fd cf       	rjmp	.-6      	; 0x10c <i2c_stop+0xa>

}/* i2c_stop */
 112:	08 95       	ret

00000114 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 114:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 128:	90 91 b9 00 	lds	r25, 0x00B9
 12c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	98 32       	cpi	r25, 0x28	; 40
 132:	09 f4       	brne	.+2      	; 0x136 <i2c_write+0x22>
 134:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 136:	08 95       	ret

00000138 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 138:	84 ec       	ldi	r24, 0xC4	; 196
 13a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 13e:	ec eb       	ldi	r30, 0xBC	; 188
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	ec f7       	brge	.-6      	; 0x142 <i2c_readAck+0xa>

    return TWDR;
 148:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 14c:	08 95       	ret

0000014e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 154:	ec eb       	ldi	r30, 0xBC	; 188
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	ec f7       	brge	.-6      	; 0x158 <i2c_readNak+0xa>
	
    return TWDR;
 15e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 162:	08 95       	ret

00000164 <USART0_sendChar>:
 * Procedure to send a single character over USART0. If character is linefeed, reset 
 * line. 
 * Assumes ASCII code. 
 */ 
{
	if(data == '\n')
 164:	8a 30       	cpi	r24, 0x0A	; 10
 166:	41 f4       	brne	.+16     	; 0x178 <USART0_sendChar+0x14>
	{
		while(! (UCSR0A & (1<<UDRE0)) );
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	90 81       	ld	r25, Z
 16e:	95 ff       	sbrs	r25, 5
 170:	fd cf       	rjmp	.-6      	; 0x16c <USART0_sendChar+0x8>
		UDR0 = '\r';
 172:	9d e0       	ldi	r25, 0x0D	; 13
 174:	90 93 c6 00 	sts	0x00C6, r25
	}
	while(! (UCSR0A & (1<<UDRE0)) );
 178:	e0 ec       	ldi	r30, 0xC0	; 192
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	90 81       	ld	r25, Z
 17e:	95 ff       	sbrs	r25, 5
 180:	fd cf       	rjmp	.-6      	; 0x17c <USART0_sendChar+0x18>
	UDR0 = data;
 182:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <HMC5883L_init>:
#define		Z_LSB_REG		0x05

void HMC5883L_init()
{
	// Write 0x70 to HMC5883L register A
	i2c_start_wait(WRITE_ADDRESS);
 18c:	8c e3       	ldi	r24, 0x3C	; 60
 18e:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	i2c_write(CONF_A_REG);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_write(0x70);	// avg 8 samples, 15Hz, Normal measurement
 198:	80 e7       	ldi	r24, 0x70	; 112
 19a:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_stop();			// release bus
 19e:	0e 94 81 00 	call	0x102	; 0x102 <i2c_stop>
	
	// Write 0xE0 to HMC5883L register B
	i2c_start_wait(WRITE_ADDRESS);
 1a2:	8c e3       	ldi	r24, 0x3C	; 60
 1a4:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	i2c_write(CONF_B_REG);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_write(0x20);	/* 
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
						 */
	i2c_stop();			// release bus
 1b4:	0e 94 81 00 	call	0x102	; 0x102 <i2c_stop>
	
	// Write 0x00 to HMC5883L Mode register
	i2c_start_wait(WRITE_ADDRESS);
 1b8:	8c e3       	ldi	r24, 0x3C	; 60
 1ba:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	i2c_write(CONF_M_REG);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_write(0x00);	// slow I2C, continuous measurement mode
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_stop();			// release bus
 1ca:	0e 94 81 00 	call	0x102	; 0x102 <i2c_stop>
 1ce:	08 95       	ret

000001d0 <readCompass>:
}

void readCompass(uint16_t *value) 
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	8c 01       	movw	r16, r24
	uint16_t temp;
	i2c_start_wait(WRITE_ADDRESS);
 1da:	8c e3       	ldi	r24, 0x3C	; 60
 1dc:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	i2c_write(X_LSB_REG);
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_write>
	i2c_start_wait(READ_ADDRESS);
 1e6:	8d e3       	ldi	r24, 0x3D	; 61
 1e8:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_wait>
	// Read x axis
	temp = i2c_readAck();
 1ec:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readAck>
 1f0:	c8 2f       	mov	r28, r24
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
	temp = temp | (i2c_readAck() << 8);
 1f4:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readAck>
 1f8:	9e 01       	movw	r18, r28
 1fa:	38 2b       	or	r19, r24
 1fc:	c9 01       	movw	r24, r18
	value[0] = temp;
 1fe:	f8 01       	movw	r30, r16
 200:	31 83       	std	Z+1, r19	; 0x01
 202:	20 83       	st	Z, r18
	printf("in func: temp = %d\n", temp);
 204:	9f 93       	push	r25
 206:	2f 93       	push	r18
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	9f 93       	push	r25
 20e:	8f 93       	push	r24
 210:	0e 94 94 01 	call	0x328	; 0x328 <printf>
	
	// Read z
	temp = i2c_readAck();
 214:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readAck>
 218:	c8 2f       	mov	r28, r24
 21a:	d0 e0       	ldi	r29, 0x00	; 0
	temp = (temp<<8) | i2c_readAck();
 21c:	dc 2f       	mov	r29, r28
 21e:	cc 27       	eor	r28, r28
 220:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readAck>
 224:	c8 2b       	or	r28, r24
	value[1] = temp;
 226:	f8 01       	movw	r30, r16
 228:	d3 83       	std	Z+3, r29	; 0x03
 22a:	c2 83       	std	Z+2, r28	; 0x02
	
	// Read y axis
	temp = i2c_readAck();
 22c:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_readAck>
 230:	c8 2f       	mov	r28, r24
 232:	d0 e0       	ldi	r29, 0x00	; 0
	temp = (temp<<8) | i2c_readNak();
 234:	dc 2f       	mov	r29, r28
 236:	cc 27       	eor	r28, r28
 238:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_readNak>
 23c:	c8 2b       	or	r28, r24
	value[2] = temp;
 23e:	f8 01       	movw	r30, r16
 240:	d5 83       	std	Z+5, r29	; 0x05
 242:	c4 83       	std	Z+4, r28	; 0x04

	i2c_stop();
 244:	0e 94 81 00 	call	0x102	; 0x102 <i2c_stop>
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <USART0_init>:
/*
 * Procedure to initialize USART0 asynchronous with enabled RX/TX, 8 bit data,
 * no parity, and 1 stop bit. 
*/
{
	UCSR0B = (1<<TXEN0)  | (1<<RXEN0);	// enable transmit/receive
 25a:	88 e1       	ldi	r24, 0x18	; 24
 25c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	// asynchronous, 8N1
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = ASYNCH_NORM_PRESCALER;		// To set 9600 baud rate with 8MHz clock
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	80 93 c4 00 	sts	0x00C4, r24
 26c:	08 95       	ret

0000026e <main>:

//set stream pointer
FILE usart0_str = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_RW);

int main(void)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <main+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <main+0x8>
 276:	00 d0       	rcall	.+0      	; 0x278 <main+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	uint16_t values[3];
	int16_t count = 0;
	stdout = &usart0_str;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	90 93 51 01 	sts	0x0151, r25
 284:	80 93 50 01 	sts	0x0150, r24
	USART0_init();
 288:	0e 94 2d 01 	call	0x25a	; 0x25a <USART0_init>
	i2c_init();
 28c:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	
	HMC5883L_init();
 290:	0e 94 c6 00 	call	0x18c	; 0x18c <HMC5883L_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x2c>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x36>
 2a4:	00 00       	nop
	_delay_ms(100); // Wait for compass to initiate
	printf("hello world!\n");
 2a6:	82 e2       	ldi	r24, 0x22	; 34
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 aa 01 	call	0x354	; 0x354 <puts>
	printf("F_CPU: %ul\n", F_CPU);
 2ae:	1f 92       	push	r1
 2b0:	8a e7       	ldi	r24, 0x7A	; 122
 2b2:	8f 93       	push	r24
 2b4:	82 e1       	ldi	r24, 0x12	; 18
 2b6:	8f 93       	push	r24
 2b8:	1f 92       	push	r1
 2ba:	8f e2       	ldi	r24, 0x2F	; 47
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	9f 93       	push	r25
 2c0:	8f 93       	push	r24
 2c2:	0e 94 94 01 	call	0x328	; 0x328 <printf>
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
FILE usart0_str = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_RW);

int main(void)
{
	uint16_t values[3];
	int16_t count = 0;
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 		//i2c_read_byte(0x3C, 0x03, &x_gaussLSB);
 		//i2c_read_byte(0x3C, 0x04, &x_gaussMSB);
 		//x = (x_gaussMSB<<8) | x_gaussLSB;
		readCompass(values);
		//printf("xMSB: %u | xLSB: %u\n", x_gaussMSB, x_gaussLSB);
		printf("X: %d\t|\tread #%u\n", values[0], count++);
 2d6:	0f 2e       	mov	r0, r31
 2d8:	fb e3       	ldi	r31, 0x3B	; 59
 2da:	ef 2e       	mov	r14, r31
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	ff 2e       	mov	r15, r31
 2e0:	f0 2d       	mov	r31, r0
    while (1)
    {
 		//i2c_read_byte(0x3C, 0x03, &x_gaussLSB);
 		//i2c_read_byte(0x3C, 0x04, &x_gaussMSB);
 		//x = (x_gaussMSB<<8) | x_gaussLSB;
		readCompass(values);
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <readCompass>
		//printf("xMSB: %u | xLSB: %u\n", x_gaussMSB, x_gaussLSB);
		printf("X: %d\t|\tread #%u\n", values[0], count++);
 2ea:	68 01       	movw	r12, r16
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	c2 1a       	sub	r12, r18
 2f0:	d2 0a       	sbc	r13, r18
 2f2:	1f 93       	push	r17
 2f4:	0f 93       	push	r16
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	8f 93       	push	r24
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	8f 93       	push	r24
 2fe:	ff 92       	push	r15
 300:	ef 92       	push	r14
 302:	0e 94 94 01 	call	0x328	; 0x328 <printf>
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	94 e3       	ldi	r25, 0x34	; 52
 30a:	2c e0       	ldi	r18, 0x0C	; 12
 30c:	81 50       	subi	r24, 0x01	; 1
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	20 40       	sbci	r18, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x9e>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0xa8>
 316:	00 00       	nop
 318:	86 01       	movw	r16, r12
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	dd cf       	rjmp	.-70     	; 0x2e2 <main+0x74>

00000328 <printf>:
 328:	a0 e0       	ldi	r26, 0x00	; 0
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	ea e9       	ldi	r30, 0x9A	; 154
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__prologue_saves__+0x20>
 334:	ae 01       	movw	r20, r28
 336:	4b 5f       	subi	r20, 0xFB	; 251
 338:	5f 4f       	sbci	r21, 0xFF	; 255
 33a:	fa 01       	movw	r30, r20
 33c:	61 91       	ld	r22, Z+
 33e:	71 91       	ld	r23, Z+
 340:	af 01       	movw	r20, r30
 342:	80 91 50 01 	lds	r24, 0x0150
 346:	90 91 51 01 	lds	r25, 0x0151
 34a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <vfprintf>
 34e:	e2 e0       	ldi	r30, 0x02	; 2
 350:	0c 94 84 04 	jmp	0x908	; 0x908 <__stack+0x9>

00000354 <puts>:
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	e0 91 50 01 	lds	r30, 0x0150
 360:	f0 91 51 01 	lds	r31, 0x0151
 364:	23 81       	ldd	r18, Z+3	; 0x03
 366:	21 ff       	sbrs	r18, 1
 368:	1b c0       	rjmp	.+54     	; 0x3a0 <puts+0x4c>
 36a:	8c 01       	movw	r16, r24
 36c:	d0 e0       	ldi	r29, 0x00	; 0
 36e:	c0 e0       	ldi	r28, 0x00	; 0
 370:	f8 01       	movw	r30, r16
 372:	81 91       	ld	r24, Z+
 374:	8f 01       	movw	r16, r30
 376:	60 91 50 01 	lds	r22, 0x0150
 37a:	70 91 51 01 	lds	r23, 0x0151
 37e:	db 01       	movw	r26, r22
 380:	18 96       	adiw	r26, 0x08	; 8
 382:	ed 91       	ld	r30, X+
 384:	fc 91       	ld	r31, X
 386:	19 97       	sbiw	r26, 0x09	; 9
 388:	88 23       	and	r24, r24
 38a:	31 f0       	breq	.+12     	; 0x398 <puts+0x44>
 38c:	09 95       	icall
 38e:	89 2b       	or	r24, r25
 390:	79 f3       	breq	.-34     	; 0x370 <puts+0x1c>
 392:	df ef       	ldi	r29, 0xFF	; 255
 394:	cf ef       	ldi	r28, 0xFF	; 255
 396:	ec cf       	rjmp	.-40     	; 0x370 <puts+0x1c>
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	09 95       	icall
 39c:	89 2b       	or	r24, r25
 39e:	19 f0       	breq	.+6      	; 0x3a6 <puts+0x52>
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	9f ef       	ldi	r25, 0xFF	; 255
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <puts+0x56>
 3a6:	8d 2f       	mov	r24, r29
 3a8:	9c 2f       	mov	r25, r28
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <vfprintf>:
 3b4:	ac e0       	ldi	r26, 0x0C	; 12
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e0 ee       	ldi	r30, 0xE0	; 224
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__prologue_saves__>
 3c0:	7c 01       	movw	r14, r24
 3c2:	6b 01       	movw	r12, r22
 3c4:	8a 01       	movw	r16, r20
 3c6:	fc 01       	movw	r30, r24
 3c8:	17 82       	std	Z+7, r1	; 0x07
 3ca:	16 82       	std	Z+6, r1	; 0x06
 3cc:	83 81       	ldd	r24, Z+3	; 0x03
 3ce:	81 ff       	sbrs	r24, 1
 3d0:	bd c1       	rjmp	.+890    	; 0x74c <vfprintf+0x398>
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	4c 01       	movw	r8, r24
 3d8:	f7 01       	movw	r30, r14
 3da:	93 81       	ldd	r25, Z+3	; 0x03
 3dc:	f6 01       	movw	r30, r12
 3de:	93 fd       	sbrc	r25, 3
 3e0:	85 91       	lpm	r24, Z+
 3e2:	93 ff       	sbrs	r25, 3
 3e4:	81 91       	ld	r24, Z+
 3e6:	6f 01       	movw	r12, r30
 3e8:	88 23       	and	r24, r24
 3ea:	09 f4       	brne	.+2      	; 0x3ee <vfprintf+0x3a>
 3ec:	ab c1       	rjmp	.+854    	; 0x744 <vfprintf+0x390>
 3ee:	85 32       	cpi	r24, 0x25	; 37
 3f0:	39 f4       	brne	.+14     	; 0x400 <vfprintf+0x4c>
 3f2:	93 fd       	sbrc	r25, 3
 3f4:	85 91       	lpm	r24, Z+
 3f6:	93 ff       	sbrs	r25, 3
 3f8:	81 91       	ld	r24, Z+
 3fa:	6f 01       	movw	r12, r30
 3fc:	85 32       	cpi	r24, 0x25	; 37
 3fe:	29 f4       	brne	.+10     	; 0x40a <vfprintf+0x56>
 400:	b7 01       	movw	r22, r14
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 408:	e7 cf       	rjmp	.-50     	; 0x3d8 <vfprintf+0x24>
 40a:	51 2c       	mov	r5, r1
 40c:	31 2c       	mov	r3, r1
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	20 32       	cpi	r18, 0x20	; 32
 412:	a0 f4       	brcc	.+40     	; 0x43c <vfprintf+0x88>
 414:	8b 32       	cpi	r24, 0x2B	; 43
 416:	69 f0       	breq	.+26     	; 0x432 <vfprintf+0x7e>
 418:	30 f4       	brcc	.+12     	; 0x426 <vfprintf+0x72>
 41a:	80 32       	cpi	r24, 0x20	; 32
 41c:	59 f0       	breq	.+22     	; 0x434 <vfprintf+0x80>
 41e:	83 32       	cpi	r24, 0x23	; 35
 420:	69 f4       	brne	.+26     	; 0x43c <vfprintf+0x88>
 422:	20 61       	ori	r18, 0x10	; 16
 424:	2c c0       	rjmp	.+88     	; 0x47e <vfprintf+0xca>
 426:	8d 32       	cpi	r24, 0x2D	; 45
 428:	39 f0       	breq	.+14     	; 0x438 <vfprintf+0x84>
 42a:	80 33       	cpi	r24, 0x30	; 48
 42c:	39 f4       	brne	.+14     	; 0x43c <vfprintf+0x88>
 42e:	21 60       	ori	r18, 0x01	; 1
 430:	26 c0       	rjmp	.+76     	; 0x47e <vfprintf+0xca>
 432:	22 60       	ori	r18, 0x02	; 2
 434:	24 60       	ori	r18, 0x04	; 4
 436:	23 c0       	rjmp	.+70     	; 0x47e <vfprintf+0xca>
 438:	28 60       	ori	r18, 0x08	; 8
 43a:	21 c0       	rjmp	.+66     	; 0x47e <vfprintf+0xca>
 43c:	27 fd       	sbrc	r18, 7
 43e:	27 c0       	rjmp	.+78     	; 0x48e <vfprintf+0xda>
 440:	30 ed       	ldi	r19, 0xD0	; 208
 442:	38 0f       	add	r19, r24
 444:	3a 30       	cpi	r19, 0x0A	; 10
 446:	78 f4       	brcc	.+30     	; 0x466 <vfprintf+0xb2>
 448:	26 ff       	sbrs	r18, 6
 44a:	06 c0       	rjmp	.+12     	; 0x458 <vfprintf+0xa4>
 44c:	fa e0       	ldi	r31, 0x0A	; 10
 44e:	5f 9e       	mul	r5, r31
 450:	30 0d       	add	r19, r0
 452:	11 24       	eor	r1, r1
 454:	53 2e       	mov	r5, r19
 456:	13 c0       	rjmp	.+38     	; 0x47e <vfprintf+0xca>
 458:	8a e0       	ldi	r24, 0x0A	; 10
 45a:	38 9e       	mul	r3, r24
 45c:	30 0d       	add	r19, r0
 45e:	11 24       	eor	r1, r1
 460:	33 2e       	mov	r3, r19
 462:	20 62       	ori	r18, 0x20	; 32
 464:	0c c0       	rjmp	.+24     	; 0x47e <vfprintf+0xca>
 466:	8e 32       	cpi	r24, 0x2E	; 46
 468:	21 f4       	brne	.+8      	; 0x472 <vfprintf+0xbe>
 46a:	26 fd       	sbrc	r18, 6
 46c:	6b c1       	rjmp	.+726    	; 0x744 <vfprintf+0x390>
 46e:	20 64       	ori	r18, 0x40	; 64
 470:	06 c0       	rjmp	.+12     	; 0x47e <vfprintf+0xca>
 472:	8c 36       	cpi	r24, 0x6C	; 108
 474:	11 f4       	brne	.+4      	; 0x47a <vfprintf+0xc6>
 476:	20 68       	ori	r18, 0x80	; 128
 478:	02 c0       	rjmp	.+4      	; 0x47e <vfprintf+0xca>
 47a:	88 36       	cpi	r24, 0x68	; 104
 47c:	41 f4       	brne	.+16     	; 0x48e <vfprintf+0xda>
 47e:	f6 01       	movw	r30, r12
 480:	93 fd       	sbrc	r25, 3
 482:	85 91       	lpm	r24, Z+
 484:	93 ff       	sbrs	r25, 3
 486:	81 91       	ld	r24, Z+
 488:	6f 01       	movw	r12, r30
 48a:	81 11       	cpse	r24, r1
 48c:	c1 cf       	rjmp	.-126    	; 0x410 <vfprintf+0x5c>
 48e:	98 2f       	mov	r25, r24
 490:	9f 7d       	andi	r25, 0xDF	; 223
 492:	95 54       	subi	r25, 0x45	; 69
 494:	93 30       	cpi	r25, 0x03	; 3
 496:	28 f4       	brcc	.+10     	; 0x4a2 <vfprintf+0xee>
 498:	0c 5f       	subi	r16, 0xFC	; 252
 49a:	1f 4f       	sbci	r17, 0xFF	; 255
 49c:	ff e3       	ldi	r31, 0x3F	; 63
 49e:	f9 83       	std	Y+1, r31	; 0x01
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <vfprintf+0x108>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	31 f0       	breq	.+12     	; 0x4b2 <vfprintf+0xfe>
 4a6:	83 37       	cpi	r24, 0x73	; 115
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <vfprintf+0x112>
 4aa:	83 35       	cpi	r24, 0x53	; 83
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <vfprintf+0xfc>
 4ae:	5b c0       	rjmp	.+182    	; 0x566 <vfprintf+0x1b2>
 4b0:	22 c0       	rjmp	.+68     	; 0x4f6 <vfprintf+0x142>
 4b2:	f8 01       	movw	r30, r16
 4b4:	80 81       	ld	r24, Z
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	0e 5f       	subi	r16, 0xFE	; 254
 4ba:	1f 4f       	sbci	r17, 0xFF	; 255
 4bc:	44 24       	eor	r4, r4
 4be:	43 94       	inc	r4
 4c0:	51 2c       	mov	r5, r1
 4c2:	54 01       	movw	r10, r8
 4c4:	15 c0       	rjmp	.+42     	; 0x4f0 <vfprintf+0x13c>
 4c6:	38 01       	movw	r6, r16
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	6f 0e       	add	r6, r31
 4cc:	71 1c       	adc	r7, r1
 4ce:	f8 01       	movw	r30, r16
 4d0:	a0 80       	ld	r10, Z
 4d2:	b1 80       	ldd	r11, Z+1	; 0x01
 4d4:	26 ff       	sbrs	r18, 6
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <vfprintf+0x12a>
 4d8:	65 2d       	mov	r22, r5
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <vfprintf+0x12e>
 4de:	6f ef       	ldi	r22, 0xFF	; 255
 4e0:	7f ef       	ldi	r23, 0xFF	; 255
 4e2:	c5 01       	movw	r24, r10
 4e4:	2c 87       	std	Y+12, r18	; 0x0c
 4e6:	0e 94 b7 03 	call	0x76e	; 0x76e <strnlen>
 4ea:	2c 01       	movw	r4, r24
 4ec:	83 01       	movw	r16, r6
 4ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 4f0:	2f 77       	andi	r18, 0x7F	; 127
 4f2:	22 2e       	mov	r2, r18
 4f4:	17 c0       	rjmp	.+46     	; 0x524 <vfprintf+0x170>
 4f6:	38 01       	movw	r6, r16
 4f8:	f2 e0       	ldi	r31, 0x02	; 2
 4fa:	6f 0e       	add	r6, r31
 4fc:	71 1c       	adc	r7, r1
 4fe:	f8 01       	movw	r30, r16
 500:	a0 80       	ld	r10, Z
 502:	b1 80       	ldd	r11, Z+1	; 0x01
 504:	26 ff       	sbrs	r18, 6
 506:	03 c0       	rjmp	.+6      	; 0x50e <vfprintf+0x15a>
 508:	65 2d       	mov	r22, r5
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <vfprintf+0x15e>
 50e:	6f ef       	ldi	r22, 0xFF	; 255
 510:	7f ef       	ldi	r23, 0xFF	; 255
 512:	c5 01       	movw	r24, r10
 514:	2c 87       	std	Y+12, r18	; 0x0c
 516:	0e 94 ac 03 	call	0x758	; 0x758 <strnlen_P>
 51a:	2c 01       	movw	r4, r24
 51c:	2c 85       	ldd	r18, Y+12	; 0x0c
 51e:	20 68       	ori	r18, 0x80	; 128
 520:	22 2e       	mov	r2, r18
 522:	83 01       	movw	r16, r6
 524:	23 fc       	sbrc	r2, 3
 526:	1b c0       	rjmp	.+54     	; 0x55e <vfprintf+0x1aa>
 528:	83 2d       	mov	r24, r3
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	48 16       	cp	r4, r24
 52e:	59 06       	cpc	r5, r25
 530:	b0 f4       	brcc	.+44     	; 0x55e <vfprintf+0x1aa>
 532:	b7 01       	movw	r22, r14
 534:	80 e2       	ldi	r24, 0x20	; 32
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 53c:	3a 94       	dec	r3
 53e:	f4 cf       	rjmp	.-24     	; 0x528 <vfprintf+0x174>
 540:	f5 01       	movw	r30, r10
 542:	27 fc       	sbrc	r2, 7
 544:	85 91       	lpm	r24, Z+
 546:	27 fe       	sbrs	r2, 7
 548:	81 91       	ld	r24, Z+
 54a:	5f 01       	movw	r10, r30
 54c:	b7 01       	movw	r22, r14
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 554:	31 10       	cpse	r3, r1
 556:	3a 94       	dec	r3
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	4f 1a       	sub	r4, r31
 55c:	51 08       	sbc	r5, r1
 55e:	41 14       	cp	r4, r1
 560:	51 04       	cpc	r5, r1
 562:	71 f7       	brne	.-36     	; 0x540 <vfprintf+0x18c>
 564:	e5 c0       	rjmp	.+458    	; 0x730 <vfprintf+0x37c>
 566:	84 36       	cpi	r24, 0x64	; 100
 568:	11 f0       	breq	.+4      	; 0x56e <vfprintf+0x1ba>
 56a:	89 36       	cpi	r24, 0x69	; 105
 56c:	39 f5       	brne	.+78     	; 0x5bc <vfprintf+0x208>
 56e:	f8 01       	movw	r30, r16
 570:	27 ff       	sbrs	r18, 7
 572:	07 c0       	rjmp	.+14     	; 0x582 <vfprintf+0x1ce>
 574:	60 81       	ld	r22, Z
 576:	71 81       	ldd	r23, Z+1	; 0x01
 578:	82 81       	ldd	r24, Z+2	; 0x02
 57a:	93 81       	ldd	r25, Z+3	; 0x03
 57c:	0c 5f       	subi	r16, 0xFC	; 252
 57e:	1f 4f       	sbci	r17, 0xFF	; 255
 580:	08 c0       	rjmp	.+16     	; 0x592 <vfprintf+0x1de>
 582:	60 81       	ld	r22, Z
 584:	71 81       	ldd	r23, Z+1	; 0x01
 586:	07 2e       	mov	r0, r23
 588:	00 0c       	add	r0, r0
 58a:	88 0b       	sbc	r24, r24
 58c:	99 0b       	sbc	r25, r25
 58e:	0e 5f       	subi	r16, 0xFE	; 254
 590:	1f 4f       	sbci	r17, 0xFF	; 255
 592:	2f 76       	andi	r18, 0x6F	; 111
 594:	72 2e       	mov	r7, r18
 596:	97 ff       	sbrs	r25, 7
 598:	09 c0       	rjmp	.+18     	; 0x5ac <vfprintf+0x1f8>
 59a:	90 95       	com	r25
 59c:	80 95       	com	r24
 59e:	70 95       	com	r23
 5a0:	61 95       	neg	r22
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	20 68       	ori	r18, 0x80	; 128
 5aa:	72 2e       	mov	r7, r18
 5ac:	2a e0       	ldi	r18, 0x0A	; 10
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	a4 01       	movw	r20, r8
 5b2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__ultoa_invert>
 5b6:	a8 2e       	mov	r10, r24
 5b8:	a8 18       	sub	r10, r8
 5ba:	44 c0       	rjmp	.+136    	; 0x644 <vfprintf+0x290>
 5bc:	85 37       	cpi	r24, 0x75	; 117
 5be:	29 f4       	brne	.+10     	; 0x5ca <vfprintf+0x216>
 5c0:	2f 7e       	andi	r18, 0xEF	; 239
 5c2:	b2 2e       	mov	r11, r18
 5c4:	2a e0       	ldi	r18, 0x0A	; 10
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	25 c0       	rjmp	.+74     	; 0x614 <vfprintf+0x260>
 5ca:	f2 2f       	mov	r31, r18
 5cc:	f9 7f       	andi	r31, 0xF9	; 249
 5ce:	bf 2e       	mov	r11, r31
 5d0:	8f 36       	cpi	r24, 0x6F	; 111
 5d2:	c1 f0       	breq	.+48     	; 0x604 <vfprintf+0x250>
 5d4:	18 f4       	brcc	.+6      	; 0x5dc <vfprintf+0x228>
 5d6:	88 35       	cpi	r24, 0x58	; 88
 5d8:	79 f0       	breq	.+30     	; 0x5f8 <vfprintf+0x244>
 5da:	b4 c0       	rjmp	.+360    	; 0x744 <vfprintf+0x390>
 5dc:	80 37       	cpi	r24, 0x70	; 112
 5de:	19 f0       	breq	.+6      	; 0x5e6 <vfprintf+0x232>
 5e0:	88 37       	cpi	r24, 0x78	; 120
 5e2:	21 f0       	breq	.+8      	; 0x5ec <vfprintf+0x238>
 5e4:	af c0       	rjmp	.+350    	; 0x744 <vfprintf+0x390>
 5e6:	2f 2f       	mov	r18, r31
 5e8:	20 61       	ori	r18, 0x10	; 16
 5ea:	b2 2e       	mov	r11, r18
 5ec:	b4 fe       	sbrs	r11, 4
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <vfprintf+0x256>
 5f0:	8b 2d       	mov	r24, r11
 5f2:	84 60       	ori	r24, 0x04	; 4
 5f4:	b8 2e       	mov	r11, r24
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <vfprintf+0x256>
 5f8:	24 ff       	sbrs	r18, 4
 5fa:	0a c0       	rjmp	.+20     	; 0x610 <vfprintf+0x25c>
 5fc:	9f 2f       	mov	r25, r31
 5fe:	96 60       	ori	r25, 0x06	; 6
 600:	b9 2e       	mov	r11, r25
 602:	06 c0       	rjmp	.+12     	; 0x610 <vfprintf+0x25c>
 604:	28 e0       	ldi	r18, 0x08	; 8
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	05 c0       	rjmp	.+10     	; 0x614 <vfprintf+0x260>
 60a:	20 e1       	ldi	r18, 0x10	; 16
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <vfprintf+0x260>
 610:	20 e1       	ldi	r18, 0x10	; 16
 612:	32 e0       	ldi	r19, 0x02	; 2
 614:	f8 01       	movw	r30, r16
 616:	b7 fe       	sbrs	r11, 7
 618:	07 c0       	rjmp	.+14     	; 0x628 <vfprintf+0x274>
 61a:	60 81       	ld	r22, Z
 61c:	71 81       	ldd	r23, Z+1	; 0x01
 61e:	82 81       	ldd	r24, Z+2	; 0x02
 620:	93 81       	ldd	r25, Z+3	; 0x03
 622:	0c 5f       	subi	r16, 0xFC	; 252
 624:	1f 4f       	sbci	r17, 0xFF	; 255
 626:	06 c0       	rjmp	.+12     	; 0x634 <vfprintf+0x280>
 628:	60 81       	ld	r22, Z
 62a:	71 81       	ldd	r23, Z+1	; 0x01
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 5f       	subi	r16, 0xFE	; 254
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	a4 01       	movw	r20, r8
 636:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__ultoa_invert>
 63a:	a8 2e       	mov	r10, r24
 63c:	a8 18       	sub	r10, r8
 63e:	fb 2d       	mov	r31, r11
 640:	ff 77       	andi	r31, 0x7F	; 127
 642:	7f 2e       	mov	r7, r31
 644:	76 fe       	sbrs	r7, 6
 646:	0b c0       	rjmp	.+22     	; 0x65e <vfprintf+0x2aa>
 648:	37 2d       	mov	r19, r7
 64a:	3e 7f       	andi	r19, 0xFE	; 254
 64c:	a5 14       	cp	r10, r5
 64e:	50 f4       	brcc	.+20     	; 0x664 <vfprintf+0x2b0>
 650:	74 fe       	sbrs	r7, 4
 652:	0a c0       	rjmp	.+20     	; 0x668 <vfprintf+0x2b4>
 654:	72 fc       	sbrc	r7, 2
 656:	08 c0       	rjmp	.+16     	; 0x668 <vfprintf+0x2b4>
 658:	37 2d       	mov	r19, r7
 65a:	3e 7e       	andi	r19, 0xEE	; 238
 65c:	05 c0       	rjmp	.+10     	; 0x668 <vfprintf+0x2b4>
 65e:	ba 2c       	mov	r11, r10
 660:	37 2d       	mov	r19, r7
 662:	03 c0       	rjmp	.+6      	; 0x66a <vfprintf+0x2b6>
 664:	ba 2c       	mov	r11, r10
 666:	01 c0       	rjmp	.+2      	; 0x66a <vfprintf+0x2b6>
 668:	b5 2c       	mov	r11, r5
 66a:	34 ff       	sbrs	r19, 4
 66c:	0d c0       	rjmp	.+26     	; 0x688 <vfprintf+0x2d4>
 66e:	fe 01       	movw	r30, r28
 670:	ea 0d       	add	r30, r10
 672:	f1 1d       	adc	r31, r1
 674:	80 81       	ld	r24, Z
 676:	80 33       	cpi	r24, 0x30	; 48
 678:	11 f4       	brne	.+4      	; 0x67e <vfprintf+0x2ca>
 67a:	39 7e       	andi	r19, 0xE9	; 233
 67c:	09 c0       	rjmp	.+18     	; 0x690 <vfprintf+0x2dc>
 67e:	32 ff       	sbrs	r19, 2
 680:	06 c0       	rjmp	.+12     	; 0x68e <vfprintf+0x2da>
 682:	b3 94       	inc	r11
 684:	b3 94       	inc	r11
 686:	04 c0       	rjmp	.+8      	; 0x690 <vfprintf+0x2dc>
 688:	83 2f       	mov	r24, r19
 68a:	86 78       	andi	r24, 0x86	; 134
 68c:	09 f0       	breq	.+2      	; 0x690 <vfprintf+0x2dc>
 68e:	b3 94       	inc	r11
 690:	33 fd       	sbrc	r19, 3
 692:	13 c0       	rjmp	.+38     	; 0x6ba <vfprintf+0x306>
 694:	30 ff       	sbrs	r19, 0
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <vfprintf+0x2f0>
 698:	5a 2c       	mov	r5, r10
 69a:	b3 14       	cp	r11, r3
 69c:	18 f4       	brcc	.+6      	; 0x6a4 <vfprintf+0x2f0>
 69e:	53 0c       	add	r5, r3
 6a0:	5b 18       	sub	r5, r11
 6a2:	b3 2c       	mov	r11, r3
 6a4:	b3 14       	cp	r11, r3
 6a6:	68 f4       	brcc	.+26     	; 0x6c2 <vfprintf+0x30e>
 6a8:	b7 01       	movw	r22, r14
 6aa:	80 e2       	ldi	r24, 0x20	; 32
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	3c 87       	std	Y+12, r19	; 0x0c
 6b0:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 6b4:	b3 94       	inc	r11
 6b6:	3c 85       	ldd	r19, Y+12	; 0x0c
 6b8:	f5 cf       	rjmp	.-22     	; 0x6a4 <vfprintf+0x2f0>
 6ba:	b3 14       	cp	r11, r3
 6bc:	10 f4       	brcc	.+4      	; 0x6c2 <vfprintf+0x30e>
 6be:	3b 18       	sub	r3, r11
 6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <vfprintf+0x310>
 6c2:	31 2c       	mov	r3, r1
 6c4:	34 ff       	sbrs	r19, 4
 6c6:	12 c0       	rjmp	.+36     	; 0x6ec <vfprintf+0x338>
 6c8:	b7 01       	movw	r22, r14
 6ca:	80 e3       	ldi	r24, 0x30	; 48
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	3c 87       	std	Y+12, r19	; 0x0c
 6d0:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
 6d6:	32 ff       	sbrs	r19, 2
 6d8:	17 c0       	rjmp	.+46     	; 0x708 <vfprintf+0x354>
 6da:	31 fd       	sbrc	r19, 1
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <vfprintf+0x330>
 6de:	88 e7       	ldi	r24, 0x78	; 120
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <vfprintf+0x334>
 6e4:	88 e5       	ldi	r24, 0x58	; 88
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	b7 01       	movw	r22, r14
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <vfprintf+0x350>
 6ec:	83 2f       	mov	r24, r19
 6ee:	86 78       	andi	r24, 0x86	; 134
 6f0:	59 f0       	breq	.+22     	; 0x708 <vfprintf+0x354>
 6f2:	31 ff       	sbrs	r19, 1
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <vfprintf+0x346>
 6f6:	8b e2       	ldi	r24, 0x2B	; 43
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <vfprintf+0x348>
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	37 fd       	sbrc	r19, 7
 6fe:	8d e2       	ldi	r24, 0x2D	; 45
 700:	b7 01       	movw	r22, r14
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 708:	a5 14       	cp	r10, r5
 70a:	38 f4       	brcc	.+14     	; 0x71a <vfprintf+0x366>
 70c:	b7 01       	movw	r22, r14
 70e:	80 e3       	ldi	r24, 0x30	; 48
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 716:	5a 94       	dec	r5
 718:	f7 cf       	rjmp	.-18     	; 0x708 <vfprintf+0x354>
 71a:	aa 94       	dec	r10
 71c:	f4 01       	movw	r30, r8
 71e:	ea 0d       	add	r30, r10
 720:	f1 1d       	adc	r31, r1
 722:	80 81       	ld	r24, Z
 724:	b7 01       	movw	r22, r14
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 72c:	a1 10       	cpse	r10, r1
 72e:	f5 cf       	rjmp	.-22     	; 0x71a <vfprintf+0x366>
 730:	33 20       	and	r3, r3
 732:	09 f4       	brne	.+2      	; 0x736 <vfprintf+0x382>
 734:	51 ce       	rjmp	.-862    	; 0x3d8 <vfprintf+0x24>
 736:	b7 01       	movw	r22, r14
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 c2 03 	call	0x784	; 0x784 <fputc>
 740:	3a 94       	dec	r3
 742:	f6 cf       	rjmp	.-20     	; 0x730 <vfprintf+0x37c>
 744:	f7 01       	movw	r30, r14
 746:	86 81       	ldd	r24, Z+6	; 0x06
 748:	97 81       	ldd	r25, Z+7	; 0x07
 74a:	02 c0       	rjmp	.+4      	; 0x750 <vfprintf+0x39c>
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	9f ef       	ldi	r25, 0xFF	; 255
 750:	2c 96       	adiw	r28, 0x0c	; 12
 752:	e2 e1       	ldi	r30, 0x12	; 18
 754:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__epilogue_restores__>

00000758 <strnlen_P>:
 758:	fc 01       	movw	r30, r24
 75a:	05 90       	lpm	r0, Z+
 75c:	61 50       	subi	r22, 0x01	; 1
 75e:	70 40       	sbci	r23, 0x00	; 0
 760:	01 10       	cpse	r0, r1
 762:	d8 f7       	brcc	.-10     	; 0x75a <strnlen_P+0x2>
 764:	80 95       	com	r24
 766:	90 95       	com	r25
 768:	8e 0f       	add	r24, r30
 76a:	9f 1f       	adc	r25, r31
 76c:	08 95       	ret

0000076e <strnlen>:
 76e:	fc 01       	movw	r30, r24
 770:	61 50       	subi	r22, 0x01	; 1
 772:	70 40       	sbci	r23, 0x00	; 0
 774:	01 90       	ld	r0, Z+
 776:	01 10       	cpse	r0, r1
 778:	d8 f7       	brcc	.-10     	; 0x770 <strnlen+0x2>
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	8e 0f       	add	r24, r30
 780:	9f 1f       	adc	r25, r31
 782:	08 95       	ret

00000784 <fputc>:
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	fb 01       	movw	r30, r22
 78e:	23 81       	ldd	r18, Z+3	; 0x03
 790:	21 fd       	sbrc	r18, 1
 792:	03 c0       	rjmp	.+6      	; 0x79a <fputc+0x16>
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	28 c0       	rjmp	.+80     	; 0x7ea <fputc+0x66>
 79a:	22 ff       	sbrs	r18, 2
 79c:	16 c0       	rjmp	.+44     	; 0x7ca <fputc+0x46>
 79e:	46 81       	ldd	r20, Z+6	; 0x06
 7a0:	57 81       	ldd	r21, Z+7	; 0x07
 7a2:	24 81       	ldd	r18, Z+4	; 0x04
 7a4:	35 81       	ldd	r19, Z+5	; 0x05
 7a6:	42 17       	cp	r20, r18
 7a8:	53 07       	cpc	r21, r19
 7aa:	44 f4       	brge	.+16     	; 0x7bc <fputc+0x38>
 7ac:	a0 81       	ld	r26, Z
 7ae:	b1 81       	ldd	r27, Z+1	; 0x01
 7b0:	9d 01       	movw	r18, r26
 7b2:	2f 5f       	subi	r18, 0xFF	; 255
 7b4:	3f 4f       	sbci	r19, 0xFF	; 255
 7b6:	31 83       	std	Z+1, r19	; 0x01
 7b8:	20 83       	st	Z, r18
 7ba:	8c 93       	st	X, r24
 7bc:	26 81       	ldd	r18, Z+6	; 0x06
 7be:	37 81       	ldd	r19, Z+7	; 0x07
 7c0:	2f 5f       	subi	r18, 0xFF	; 255
 7c2:	3f 4f       	sbci	r19, 0xFF	; 255
 7c4:	37 83       	std	Z+7, r19	; 0x07
 7c6:	26 83       	std	Z+6, r18	; 0x06
 7c8:	10 c0       	rjmp	.+32     	; 0x7ea <fputc+0x66>
 7ca:	eb 01       	movw	r28, r22
 7cc:	09 2f       	mov	r16, r25
 7ce:	18 2f       	mov	r17, r24
 7d0:	00 84       	ldd	r0, Z+8	; 0x08
 7d2:	f1 85       	ldd	r31, Z+9	; 0x09
 7d4:	e0 2d       	mov	r30, r0
 7d6:	09 95       	icall
 7d8:	89 2b       	or	r24, r25
 7da:	e1 f6       	brne	.-72     	; 0x794 <fputc+0x10>
 7dc:	8e 81       	ldd	r24, Y+6	; 0x06
 7de:	9f 81       	ldd	r25, Y+7	; 0x07
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	9f 83       	std	Y+7, r25	; 0x07
 7e4:	8e 83       	std	Y+6, r24	; 0x06
 7e6:	81 2f       	mov	r24, r17
 7e8:	90 2f       	mov	r25, r16
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

000007f4 <__ultoa_invert>:
 7f4:	fa 01       	movw	r30, r20
 7f6:	aa 27       	eor	r26, r26
 7f8:	28 30       	cpi	r18, 0x08	; 8
 7fa:	51 f1       	breq	.+84     	; 0x850 <__ultoa_invert+0x5c>
 7fc:	20 31       	cpi	r18, 0x10	; 16
 7fe:	81 f1       	breq	.+96     	; 0x860 <__ultoa_invert+0x6c>
 800:	e8 94       	clt
 802:	6f 93       	push	r22
 804:	6e 7f       	andi	r22, 0xFE	; 254
 806:	6e 5f       	subi	r22, 0xFE	; 254
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	af 4f       	sbci	r26, 0xFF	; 255
 810:	b1 e0       	ldi	r27, 0x01	; 1
 812:	3e d0       	rcall	.+124    	; 0x890 <__ultoa_invert+0x9c>
 814:	b4 e0       	ldi	r27, 0x04	; 4
 816:	3c d0       	rcall	.+120    	; 0x890 <__ultoa_invert+0x9c>
 818:	67 0f       	add	r22, r23
 81a:	78 1f       	adc	r23, r24
 81c:	89 1f       	adc	r24, r25
 81e:	9a 1f       	adc	r25, r26
 820:	a1 1d       	adc	r26, r1
 822:	68 0f       	add	r22, r24
 824:	79 1f       	adc	r23, r25
 826:	8a 1f       	adc	r24, r26
 828:	91 1d       	adc	r25, r1
 82a:	a1 1d       	adc	r26, r1
 82c:	6a 0f       	add	r22, r26
 82e:	71 1d       	adc	r23, r1
 830:	81 1d       	adc	r24, r1
 832:	91 1d       	adc	r25, r1
 834:	a1 1d       	adc	r26, r1
 836:	20 d0       	rcall	.+64     	; 0x878 <__ultoa_invert+0x84>
 838:	09 f4       	brne	.+2      	; 0x83c <__ultoa_invert+0x48>
 83a:	68 94       	set
 83c:	3f 91       	pop	r19
 83e:	2a e0       	ldi	r18, 0x0A	; 10
 840:	26 9f       	mul	r18, r22
 842:	11 24       	eor	r1, r1
 844:	30 19       	sub	r19, r0
 846:	30 5d       	subi	r19, 0xD0	; 208
 848:	31 93       	st	Z+, r19
 84a:	de f6       	brtc	.-74     	; 0x802 <__ultoa_invert+0xe>
 84c:	cf 01       	movw	r24, r30
 84e:	08 95       	ret
 850:	46 2f       	mov	r20, r22
 852:	47 70       	andi	r20, 0x07	; 7
 854:	40 5d       	subi	r20, 0xD0	; 208
 856:	41 93       	st	Z+, r20
 858:	b3 e0       	ldi	r27, 0x03	; 3
 85a:	0f d0       	rcall	.+30     	; 0x87a <__ultoa_invert+0x86>
 85c:	c9 f7       	brne	.-14     	; 0x850 <__ultoa_invert+0x5c>
 85e:	f6 cf       	rjmp	.-20     	; 0x84c <__ultoa_invert+0x58>
 860:	46 2f       	mov	r20, r22
 862:	4f 70       	andi	r20, 0x0F	; 15
 864:	40 5d       	subi	r20, 0xD0	; 208
 866:	4a 33       	cpi	r20, 0x3A	; 58
 868:	18 f0       	brcs	.+6      	; 0x870 <__ultoa_invert+0x7c>
 86a:	49 5d       	subi	r20, 0xD9	; 217
 86c:	31 fd       	sbrc	r19, 1
 86e:	40 52       	subi	r20, 0x20	; 32
 870:	41 93       	st	Z+, r20
 872:	02 d0       	rcall	.+4      	; 0x878 <__ultoa_invert+0x84>
 874:	a9 f7       	brne	.-22     	; 0x860 <__ultoa_invert+0x6c>
 876:	ea cf       	rjmp	.-44     	; 0x84c <__ultoa_invert+0x58>
 878:	b4 e0       	ldi	r27, 0x04	; 4
 87a:	a6 95       	lsr	r26
 87c:	97 95       	ror	r25
 87e:	87 95       	ror	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	ba 95       	dec	r27
 886:	c9 f7       	brne	.-14     	; 0x87a <__ultoa_invert+0x86>
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	61 05       	cpc	r22, r1
 88c:	71 05       	cpc	r23, r1
 88e:	08 95       	ret
 890:	9b 01       	movw	r18, r22
 892:	ac 01       	movw	r20, r24
 894:	0a 2e       	mov	r0, r26
 896:	06 94       	lsr	r0
 898:	57 95       	ror	r21
 89a:	47 95       	ror	r20
 89c:	37 95       	ror	r19
 89e:	27 95       	ror	r18
 8a0:	ba 95       	dec	r27
 8a2:	c9 f7       	brne	.-14     	; 0x896 <__ultoa_invert+0xa2>
 8a4:	62 0f       	add	r22, r18
 8a6:	73 1f       	adc	r23, r19
 8a8:	84 1f       	adc	r24, r20
 8aa:	95 1f       	adc	r25, r21
 8ac:	a0 1d       	adc	r26, r0
 8ae:	08 95       	ret

000008b0 <__prologue_saves__>:
 8b0:	2f 92       	push	r2
 8b2:	3f 92       	push	r3
 8b4:	4f 92       	push	r4
 8b6:	5f 92       	push	r5
 8b8:	6f 92       	push	r6
 8ba:	7f 92       	push	r7
 8bc:	8f 92       	push	r8
 8be:	9f 92       	push	r9
 8c0:	af 92       	push	r10
 8c2:	bf 92       	push	r11
 8c4:	cf 92       	push	r12
 8c6:	df 92       	push	r13
 8c8:	ef 92       	push	r14
 8ca:	ff 92       	push	r15
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
 8d8:	ca 1b       	sub	r28, r26
 8da:	db 0b       	sbc	r29, r27
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
 8e6:	09 94       	ijmp

000008e8 <__epilogue_restores__>:
 8e8:	2a 88       	ldd	r2, Y+18	; 0x12
 8ea:	39 88       	ldd	r3, Y+17	; 0x11
 8ec:	48 88       	ldd	r4, Y+16	; 0x10
 8ee:	5f 84       	ldd	r5, Y+15	; 0x0f
 8f0:	6e 84       	ldd	r6, Y+14	; 0x0e
 8f2:	7d 84       	ldd	r7, Y+13	; 0x0d
 8f4:	8c 84       	ldd	r8, Y+12	; 0x0c
 8f6:	9b 84       	ldd	r9, Y+11	; 0x0b
 8f8:	aa 84       	ldd	r10, Y+10	; 0x0a
 8fa:	b9 84       	ldd	r11, Y+9	; 0x09
 8fc:	c8 84       	ldd	r12, Y+8	; 0x08
 8fe:	df 80       	ldd	r13, Y+7	; 0x07
 900:	ee 80       	ldd	r14, Y+6	; 0x06
 902:	fd 80       	ldd	r15, Y+5	; 0x05
 904:	0c 81       	ldd	r16, Y+4	; 0x04
 906:	1b 81       	ldd	r17, Y+3	; 0x03
 908:	aa 81       	ldd	r26, Y+2	; 0x02
 90a:	b9 81       	ldd	r27, Y+1	; 0x01
 90c:	ce 0f       	add	r28, r30
 90e:	d1 1d       	adc	r29, r1
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	ed 01       	movw	r28, r26
 91c:	08 95       	ret

0000091e <_exit>:
 91e:	f8 94       	cli

00000920 <__stop_program>:
 920:	ff cf       	rjmp	.-2      	; 0x920 <__stop_program>
