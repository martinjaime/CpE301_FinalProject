
PublishCompass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000ef4  00000f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800128  00800128  00000fb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a26  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040f  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e3  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  0000231c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035b  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000723  00000000  00000000  00002847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	e4 ef       	ldi	r30, 0xF4	; 244
  aa:	fe e0       	ldi	r31, 0x0E	; 14
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a8 32       	cpi	r26, 0x28	; 40
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a8 e2       	ldi	r26, 0x28	; 40
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ae 32       	cpi	r26, 0x2E	; 46
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 5f 01 	call	0x2be	; 0x2be <main>
  cc:	0c 94 78 07 	jmp	0xef0	; 0xef0 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
  d4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 b8 00 	sts	0x00B8, r24
  de:	08 95       	ret

000000e0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  e0:	94 ea       	ldi	r25, 0xA4	; 164
  e2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  e6:	ec eb       	ldi	r30, 0xBC	; 188
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	99 23       	and	r25, r25
  ee:	ec f7       	brge	.-6      	; 0xea <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
  f0:	90 91 b9 00 	lds	r25, 0x00B9
  f4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  f6:	98 30       	cpi	r25, 0x08	; 8
  f8:	11 f0       	breq	.+4      	; 0xfe <i2c_start+0x1e>
  fa:	90 31       	cpi	r25, 0x10	; 16
  fc:	a1 f4       	brne	.+40     	; 0x126 <i2c_start+0x46>

	// send device address
	TWDR = address;
  fe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 112:	90 91 b9 00 	lds	r25, 0x00B9
 116:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 118:	98 31       	cpi	r25, 0x18	; 24
 11a:	39 f0       	breq	.+14     	; 0x12a <i2c_start+0x4a>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 34       	cpi	r25, 0x40	; 64
 120:	29 f4       	brne	.+10     	; 0x12c <i2c_start+0x4c>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 12a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 12c:	08 95       	ret

0000012e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 138:	a9 eb       	ldi	r26, 0xB9	; 185
 13a:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 13c:	cb eb       	ldi	r28, 0xBB	; 187
 13e:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 140:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 142:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 144:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 146:	90 81       	ld	r25, Z
 148:	99 23       	and	r25, r25
 14a:	ec f7       	brge	.-6      	; 0x146 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 14c:	9c 91       	ld	r25, X
 14e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 150:	98 30       	cpi	r25, 0x08	; 8
 152:	11 f0       	breq	.+4      	; 0x158 <i2c_start_wait+0x2a>
 154:	90 31       	cpi	r25, 0x10	; 16
 156:	b1 f7       	brne	.-20     	; 0x144 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 158:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 15a:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 15c:	90 81       	ld	r25, Z
 15e:	99 23       	and	r25, r25
 160:	ec f7       	brge	.-6      	; 0x15c <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 162:	9c 91       	ld	r25, X
 164:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 166:	90 32       	cpi	r25, 0x20	; 32
 168:	11 f0       	breq	.+4      	; 0x16e <i2c_start_wait+0x40>
 16a:	98 35       	cpi	r25, 0x58	; 88
 16c:	29 f4       	brne	.+10     	; 0x178 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 16e:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 170:	90 81       	ld	r25, Z
 172:	94 fd       	sbrc	r25, 4
 174:	fd cf       	rjmp	.-6      	; 0x170 <i2c_start_wait+0x42>
 176:	e6 cf       	rjmp	.-52     	; 0x144 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	84 fd       	sbrc	r24, 4
 18c:	fd cf       	rjmp	.-6      	; 0x188 <i2c_stop+0xa>

}/* i2c_stop */
 18e:	08 95       	ret

00000190 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 190:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 19a:	ec eb       	ldi	r30, 0xBC	; 188
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	ec f7       	brge	.-6      	; 0x19e <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 1a4:	90 91 b9 00 	lds	r25, 0x00B9
 1a8:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	98 32       	cpi	r25, 0x28	; 40
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <i2c_write+0x22>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 1b2:	08 95       	ret

000001b4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 1b4:	84 ec       	ldi	r24, 0xC4	; 196
 1b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 1ba:	ec eb       	ldi	r30, 0xBC	; 188
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	ec f7       	brge	.-6      	; 0x1be <i2c_readAck+0xa>

    return TWDR;
 1c4:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 1c8:	08 95       	ret

000001ca <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	ec f7       	brge	.-6      	; 0x1d4 <i2c_readNak+0xa>
	
    return TWDR;
 1da:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 1de:	08 95       	ret

000001e0 <USART0_sendChar>:
 * Procedure to send a single character over USART0. If character is linefeed, reset 
 * line. 
 * Assumes ASCII code. 
 */ 
{
	if(data == '\n')
 1e0:	8a 30       	cpi	r24, 0x0A	; 10
 1e2:	41 f4       	brne	.+16     	; 0x1f4 <USART0_sendChar+0x14>
	{
		while(! (UCSR0A & (1<<UDRE0)) );
 1e4:	e0 ec       	ldi	r30, 0xC0	; 192
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	90 81       	ld	r25, Z
 1ea:	95 ff       	sbrs	r25, 5
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <USART0_sendChar+0x8>
		UDR0 = '\r';
 1ee:	9d e0       	ldi	r25, 0x0D	; 13
 1f0:	90 93 c6 00 	sts	0x00C6, r25
	}
	while(! (UCSR0A & (1<<UDRE0)) );
 1f4:	e0 ec       	ldi	r30, 0xC0	; 192
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	90 81       	ld	r25, Z
 1fa:	95 ff       	sbrs	r25, 5
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <USART0_sendChar+0x18>
	UDR0 = data;
 1fe:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	08 95       	ret

00000208 <HMC5883L_init>:

void HMC5883L_init()
{
	char x = 0x00;
	// Write 0x70 to HMC5883L register A
	i2c_start(WRITE_ADDRESS);
 208:	8c e3       	ldi	r24, 0x3C	; 60
 20a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_start>
	//i2c_write(WRITE_ADDRESS);
	//i2c_start_wait(WRITE_ADDRESS);
	//i2c_write(CONF_A_REG);
	i2c_write(x);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_write>
	i2c_write(0x70);	// avg 8 samples, 15Hz, Normal measurement
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_write>
	i2c_write(0x20);
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_write>
	i2c_write(0x00);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_write>
	i2c_stop();
 226:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	8f ec       	ldi	r24, 0xCF	; 207
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <HMC5883L_init+0x26>
 232:	00 c0       	rjmp	.+0      	; 0x234 <HMC5883L_init+0x2c>
 234:	00 00       	nop
 236:	08 95       	ret

00000238 <readCompass>:
// 	i2c_write(0x00);	// slow I2C, continuous measurement mode
// 	i2c_stop();			// release bus
}

void readCompass(uint16_t *value) 
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	8c 01       	movw	r16, r24
	uint16_t temp;
	//i2c_start_wait(WRITE_ADDRESS);
	i2c_start(WRITE_ADDRESS);
 242:	8c e3       	ldi	r24, 0x3C	; 60
 244:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_start>
	i2c_write(0x03);
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_write>
	i2c_start_wait(READ_ADDRESS);
 24e:	8d e3       	ldi	r24, 0x3D	; 61
 250:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_start_wait>
	// Read x axis
	temp = i2c_readAck();
 254:	0e 94 da 00 	call	0x1b4	; 0x1b4 <i2c_readAck>
 258:	c8 2f       	mov	r28, r24
 25a:	d0 e0       	ldi	r29, 0x00	; 0
	temp = (temp << 8) | i2c_readAck();
 25c:	dc 2f       	mov	r29, r28
 25e:	cc 27       	eor	r28, r28
 260:	0e 94 da 00 	call	0x1b4	; 0x1b4 <i2c_readAck>
 264:	c8 2b       	or	r28, r24
	value[0] = temp;
 266:	f8 01       	movw	r30, r16
 268:	d1 83       	std	Z+1, r29	; 0x01
 26a:	c0 83       	st	Z, r28
	
	// Read z
	temp = i2c_readAck();
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <i2c_readAck>
 270:	c8 2f       	mov	r28, r24
 272:	d0 e0       	ldi	r29, 0x00	; 0
	temp = (temp << 8) | i2c_readAck();
 274:	dc 2f       	mov	r29, r28
 276:	cc 27       	eor	r28, r28
 278:	0e 94 da 00 	call	0x1b4	; 0x1b4 <i2c_readAck>
 27c:	c8 2b       	or	r28, r24
	value[2] = temp;
 27e:	f8 01       	movw	r30, r16
 280:	d5 83       	std	Z+5, r29	; 0x05
 282:	c4 83       	std	Z+4, r28	; 0x04
	
	// Read y axis
	temp = i2c_readAck();
 284:	0e 94 da 00 	call	0x1b4	; 0x1b4 <i2c_readAck>
 288:	c8 2f       	mov	r28, r24
 28a:	d0 e0       	ldi	r29, 0x00	; 0
	temp = (temp << 8) | i2c_readNak();
 28c:	dc 2f       	mov	r29, r28
 28e:	cc 27       	eor	r28, r28
 290:	0e 94 e5 00 	call	0x1ca	; 0x1ca <i2c_readNak>
 294:	c8 2b       	or	r28, r24
	value[1] = temp;
 296:	f8 01       	movw	r30, r16
 298:	d3 83       	std	Z+3, r29	; 0x03
 29a:	c2 83       	std	Z+2, r28	; 0x02

	i2c_stop();
 29c:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_stop>
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <USART0_init>:
/*
 * Procedure to initialize USART0 asynchronous with enabled RX/TX, 8 bit data,
 * no parity, and 1 stop bit. 
*/
{
	UCSR0B = (1<<TXEN0)  | (1<<RXEN0);	// enable transmit/receive
 2aa:	88 e1       	ldi	r24, 0x18	; 24
 2ac:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	// asynchronous, 8N1
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = ASYNCH_NORM_PRESCALER;		// To set 9600 baud rate with 8MHz clock
 2b6:	83 e3       	ldi	r24, 0x33	; 51
 2b8:	80 93 c4 00 	sts	0x00C4, r24
 2bc:	08 95       	ret

000002be <main>:

//set stream pointer
FILE usart0_str = FDEV_SETUP_STREAM(USART0_sendChar, NULL, _FDEV_SETUP_RW);

int main(void)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0x8>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0xa>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	uint16_t values[3];
	float  direction;
	uint32_t magnitude;
	
	stdout = &usart0_str;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	90 93 2b 01 	sts	0x012B, r25
 2d4:	80 93 2a 01 	sts	0x012A, r24
	
	USART0_init();
 2d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART0_init>
	i2c_init();
 2dc:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2c_init>
	HMC5883L_init();
 2e0:	0e 94 04 01 	call	0x208	; 0x208 <HMC5883L_init>

	printf("Hello world!\n");
 2e4:	8e e0       	ldi	r24, 0x0E	; 14
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 93 04 	call	0x926	; 0x926 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	81 ee       	ldi	r24, 0xE1	; 225
 2f0:	94 e0       	ldi	r25, 0x04	; 4
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x34>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x3e>
 2fc:	00 00       	nop
		readCompass(values);
		magnitude = (uint32_t)sqrt(values[0]*values[0] + values[1]*values[1] + values[2]*values[2]);
		direction = (float)atan2(values[1], values[0]); // calculate direction in radians
		direction = direction * 180 / M_PI;
// 		printf("<x, y, z> = %5.d\t%5.d\t%5.d\n", values[0], values[1], values[2]);
		printf("%d %d %d %d\n", values[0], values[1], values[2], (int)direction);
 2fe:	0f 2e       	mov	r0, r31
 300:	fb e1       	ldi	r31, 0x1B	; 27
 302:	cf 2e       	mov	r12, r31
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	df 2e       	mov	r13, r31
 308:	f0 2d       	mov	r31, r0
	printf("Hello world!\n");
	_delay_ms(200); // Wait for compass to initiate
    while (1)
    {
		//printf("45 50 20 45\n");
		readCompass(values);
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	0e 94 1c 01 	call	0x238	; 0x238 <readCompass>
		magnitude = (uint32_t)sqrt(values[0]*values[0] + values[1]*values[1] + values[2]*values[2]);
		direction = (float)atan2(values[1], values[0]); // calculate direction in radians
 312:	09 81       	ldd	r16, Y+1	; 0x01
 314:	1a 81       	ldd	r17, Y+2	; 0x02
 316:	eb 80       	ldd	r14, Y+3	; 0x03
 318:	fc 80       	ldd	r15, Y+4	; 0x04
 31a:	b8 01       	movw	r22, r16
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__floatunsisf>
 324:	4b 01       	movw	r8, r22
 326:	5c 01       	movw	r10, r24
 328:	b7 01       	movw	r22, r14
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__floatunsisf>
 332:	a5 01       	movw	r20, r10
 334:	94 01       	movw	r18, r8
 336:	0e 94 db 01 	call	0x3b6	; 0x3b6 <atan2>
		direction = direction * 180 / M_PI;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	44 e3       	ldi	r20, 0x34	; 52
 340:	53 e4       	ldi	r21, 0x43	; 67
 342:	0e 94 9f 03 	call	0x73e	; 0x73e <__mulsf3>
 346:	2b ed       	ldi	r18, 0xDB	; 219
 348:	3f e0       	ldi	r19, 0x0F	; 15
 34a:	49 e4       	ldi	r20, 0x49	; 73
 34c:	50 e4       	ldi	r21, 0x40	; 64
 34e:	0e 94 3a 02 	call	0x474	; 0x474 <__divsf3>
// 		printf("<x, y, z> = %5.d\t%5.d\t%5.d\n", values[0], values[1], values[2]);
		printf("%d %d %d %d\n", values[0], values[1], values[2], (int)direction);
 352:	0e 94 ac 02 	call	0x558	; 0x558 <__fixsfsi>
 356:	7f 93       	push	r23
 358:	6f 93       	push	r22
 35a:	8e 81       	ldd	r24, Y+6	; 0x06
 35c:	8f 93       	push	r24
 35e:	8d 81       	ldd	r24, Y+5	; 0x05
 360:	8f 93       	push	r24
 362:	ff 92       	push	r15
 364:	ef 92       	push	r14
 366:	1f 93       	push	r17
 368:	0f 93       	push	r16
 36a:	df 92       	push	r13
 36c:	cf 92       	push	r12
 36e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <printf>
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	81 ee       	ldi	r24, 0xE1	; 225
 376:	94 e0       	ldi	r25, 0x04	; 4
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0xba>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0xc4>
 382:	00 00       	nop
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	bd cf       	rjmp	.-134    	; 0x30a <main+0x4c>
 390:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_pscA>
 394:	60 f0       	brcs	.+24     	; 0x3ae <main+0xf0>
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	09 f4       	brne	.+2      	; 0x39e <main+0xe0>
 39c:	9e ef       	ldi	r25, 0xFE	; 254
 39e:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscB>
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <main+0xf0>
 3a4:	40 e8       	ldi	r20, 0x80	; 128
 3a6:	51 e0       	ldi	r21, 0x01	; 1
 3a8:	71 f4       	brne	.+28     	; 0x3c6 <atan2+0x10>
 3aa:	5e ef       	ldi	r21, 0xFE	; 254
 3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <atan2+0x10>
 3ae:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>
 3b2:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_zero>

000003b6 <atan2>:
 3b6:	e9 2f       	mov	r30, r25
 3b8:	e0 78       	andi	r30, 0x80	; 128
 3ba:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_split3>
 3be:	40 f3       	brcs	.-48     	; 0x390 <main+0xd2>
 3c0:	09 2e       	mov	r0, r25
 3c2:	05 2a       	or	r0, r21
 3c4:	b1 f3       	breq	.-20     	; 0x3b2 <main+0xf4>
 3c6:	26 17       	cp	r18, r22
 3c8:	37 07       	cpc	r19, r23
 3ca:	48 07       	cpc	r20, r24
 3cc:	59 07       	cpc	r21, r25
 3ce:	38 f0       	brcs	.+14     	; 0x3de <atan2+0x28>
 3d0:	0e 2e       	mov	r0, r30
 3d2:	07 f8       	bld	r0, 7
 3d4:	e0 25       	eor	r30, r0
 3d6:	69 f0       	breq	.+26     	; 0x3f2 <atan2+0x3c>
 3d8:	e0 25       	eor	r30, r0
 3da:	e0 64       	ori	r30, 0x40	; 64
 3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <atan2+0x3c>
 3de:	ef 63       	ori	r30, 0x3F	; 63
 3e0:	07 f8       	bld	r0, 7
 3e2:	00 94       	com	r0
 3e4:	07 fa       	bst	r0, 7
 3e6:	db 01       	movw	r26, r22
 3e8:	b9 01       	movw	r22, r18
 3ea:	9d 01       	movw	r18, r26
 3ec:	dc 01       	movw	r26, r24
 3ee:	ca 01       	movw	r24, r20
 3f0:	ad 01       	movw	r20, r26
 3f2:	ef 93       	push	r30
 3f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__divsf3_pse>
 3f8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_round>
 3fc:	0e 94 0b 02 	call	0x416	; 0x416 <atan>
 400:	5f 91       	pop	r21
 402:	55 23       	and	r21, r21
 404:	39 f0       	breq	.+14     	; 0x414 <atan2+0x5e>
 406:	2b ed       	ldi	r18, 0xDB	; 219
 408:	3f e0       	ldi	r19, 0x0F	; 15
 40a:	49 e4       	ldi	r20, 0x49	; 73
 40c:	50 fd       	sbrc	r21, 0
 40e:	49 ec       	ldi	r20, 0xC9	; 201
 410:	0c 94 11 04 	jmp	0x822	; 0x822 <__addsf3>
 414:	08 95       	ret

00000416 <atan>:
 416:	df 93       	push	r29
 418:	dd 27       	eor	r29, r29
 41a:	b9 2f       	mov	r27, r25
 41c:	bf 77       	andi	r27, 0x7F	; 127
 41e:	40 e8       	ldi	r20, 0x80	; 128
 420:	5f e3       	ldi	r21, 0x3F	; 63
 422:	16 16       	cp	r1, r22
 424:	17 06       	cpc	r1, r23
 426:	48 07       	cpc	r20, r24
 428:	5b 07       	cpc	r21, r27
 42a:	18 f4       	brcc	.+6      	; 0x432 <atan+0x1c>
 42c:	d9 2f       	mov	r29, r25
 42e:	0e 94 97 03 	call	0x72e	; 0x72e <inverse>
 432:	9f 93       	push	r25
 434:	8f 93       	push	r24
 436:	7f 93       	push	r23
 438:	6f 93       	push	r22
 43a:	0e 94 0c 04 	call	0x818	; 0x818 <square>
 43e:	e8 e6       	ldi	r30, 0x68	; 104
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	0e 94 28 03 	call	0x650	; 0x650 <__fp_powser>
 446:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_round>
 44a:	2f 91       	pop	r18
 44c:	3f 91       	pop	r19
 44e:	4f 91       	pop	r20
 450:	5f 91       	pop	r21
 452:	0e 94 b2 03 	call	0x764	; 0x764 <__mulsf3x>
 456:	dd 23       	and	r29, r29
 458:	51 f0       	breq	.+20     	; 0x46e <atan+0x58>
 45a:	90 58       	subi	r25, 0x80	; 128
 45c:	a2 ea       	ldi	r26, 0xA2	; 162
 45e:	2a ed       	ldi	r18, 0xDA	; 218
 460:	3f e0       	ldi	r19, 0x0F	; 15
 462:	49 ec       	ldi	r20, 0xC9	; 201
 464:	5f e3       	ldi	r21, 0x3F	; 63
 466:	d0 78       	andi	r29, 0x80	; 128
 468:	5d 27       	eor	r21, r29
 46a:	0e 94 28 04 	call	0x850	; 0x850 <__addsf3x>
 46e:	df 91       	pop	r29
 470:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_round>

00000474 <__divsf3>:
 474:	0e 94 4e 02 	call	0x49c	; 0x49c <__divsf3x>
 478:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_round>
 47c:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscB>
 480:	58 f0       	brcs	.+22     	; 0x498 <__divsf3+0x24>
 482:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_pscA>
 486:	40 f0       	brcs	.+16     	; 0x498 <__divsf3+0x24>
 488:	29 f4       	brne	.+10     	; 0x494 <__divsf3+0x20>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	29 f0       	breq	.+10     	; 0x498 <__divsf3+0x24>
 48e:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 492:	51 11       	cpse	r21, r1
 494:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 498:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>

0000049c <__divsf3x>:
 49c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_split3>
 4a0:	68 f3       	brcs	.-38     	; 0x47c <__divsf3+0x8>

000004a2 <__divsf3_pse>:
 4a2:	99 23       	and	r25, r25
 4a4:	b1 f3       	breq	.-20     	; 0x492 <__divsf3+0x1e>
 4a6:	55 23       	and	r21, r21
 4a8:	91 f3       	breq	.-28     	; 0x48e <__divsf3+0x1a>
 4aa:	95 1b       	sub	r25, r21
 4ac:	55 0b       	sbc	r21, r21
 4ae:	bb 27       	eor	r27, r27
 4b0:	aa 27       	eor	r26, r26
 4b2:	62 17       	cp	r22, r18
 4b4:	73 07       	cpc	r23, r19
 4b6:	84 07       	cpc	r24, r20
 4b8:	38 f0       	brcs	.+14     	; 0x4c8 <__divsf3_pse+0x26>
 4ba:	9f 5f       	subi	r25, 0xFF	; 255
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	44 1f       	adc	r20, r20
 4c4:	aa 1f       	adc	r26, r26
 4c6:	a9 f3       	breq	.-22     	; 0x4b2 <__divsf3_pse+0x10>
 4c8:	35 d0       	rcall	.+106    	; 0x534 <__divsf3_pse+0x92>
 4ca:	0e 2e       	mov	r0, r30
 4cc:	3a f0       	brmi	.+14     	; 0x4dc <__divsf3_pse+0x3a>
 4ce:	e0 e8       	ldi	r30, 0x80	; 128
 4d0:	32 d0       	rcall	.+100    	; 0x536 <__divsf3_pse+0x94>
 4d2:	91 50       	subi	r25, 0x01	; 1
 4d4:	50 40       	sbci	r21, 0x00	; 0
 4d6:	e6 95       	lsr	r30
 4d8:	00 1c       	adc	r0, r0
 4da:	ca f7       	brpl	.-14     	; 0x4ce <__divsf3_pse+0x2c>
 4dc:	2b d0       	rcall	.+86     	; 0x534 <__divsf3_pse+0x92>
 4de:	fe 2f       	mov	r31, r30
 4e0:	29 d0       	rcall	.+82     	; 0x534 <__divsf3_pse+0x92>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	bb 1f       	adc	r27, r27
 4ea:	26 17       	cp	r18, r22
 4ec:	37 07       	cpc	r19, r23
 4ee:	48 07       	cpc	r20, r24
 4f0:	ab 07       	cpc	r26, r27
 4f2:	b0 e8       	ldi	r27, 0x80	; 128
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <__divsf3_pse+0x56>
 4f6:	bb 0b       	sbc	r27, r27
 4f8:	80 2d       	mov	r24, r0
 4fa:	bf 01       	movw	r22, r30
 4fc:	ff 27       	eor	r31, r31
 4fe:	93 58       	subi	r25, 0x83	; 131
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	3a f0       	brmi	.+14     	; 0x512 <__divsf3_pse+0x70>
 504:	9e 3f       	cpi	r25, 0xFE	; 254
 506:	51 05       	cpc	r21, r1
 508:	78 f0       	brcs	.+30     	; 0x528 <__divsf3_pse+0x86>
 50a:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 50e:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 512:	5f 3f       	cpi	r21, 0xFF	; 255
 514:	e4 f3       	brlt	.-8      	; 0x50e <__divsf3_pse+0x6c>
 516:	98 3e       	cpi	r25, 0xE8	; 232
 518:	d4 f3       	brlt	.-12     	; 0x50e <__divsf3_pse+0x6c>
 51a:	86 95       	lsr	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f7 95       	ror	r31
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	c9 f7       	brne	.-14     	; 0x51a <__divsf3_pse+0x78>
 528:	88 0f       	add	r24, r24
 52a:	91 1d       	adc	r25, r1
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret
 534:	e1 e0       	ldi	r30, 0x01	; 1
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	bb 1f       	adc	r27, r27
 53e:	62 17       	cp	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	ba 07       	cpc	r27, r26
 546:	20 f0       	brcs	.+8      	; 0x550 <__divsf3_pse+0xae>
 548:	62 1b       	sub	r22, r18
 54a:	73 0b       	sbc	r23, r19
 54c:	84 0b       	sbc	r24, r20
 54e:	ba 0b       	sbc	r27, r26
 550:	ee 1f       	adc	r30, r30
 552:	88 f7       	brcc	.-30     	; 0x536 <__divsf3_pse+0x94>
 554:	e0 95       	com	r30
 556:	08 95       	ret

00000558 <__fixsfsi>:
 558:	0e 94 b3 02 	call	0x566	; 0x566 <__fixunssfsi>
 55c:	68 94       	set
 55e:	b1 11       	cpse	r27, r1
 560:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 564:	08 95       	ret

00000566 <__fixunssfsi>:
 566:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_splitA>
 56a:	88 f0       	brcs	.+34     	; 0x58e <__fixunssfsi+0x28>
 56c:	9f 57       	subi	r25, 0x7F	; 127
 56e:	98 f0       	brcs	.+38     	; 0x596 <__fixunssfsi+0x30>
 570:	b9 2f       	mov	r27, r25
 572:	99 27       	eor	r25, r25
 574:	b7 51       	subi	r27, 0x17	; 23
 576:	b0 f0       	brcs	.+44     	; 0x5a4 <__fixunssfsi+0x3e>
 578:	e1 f0       	breq	.+56     	; 0x5b2 <__fixunssfsi+0x4c>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	1a f0       	brmi	.+6      	; 0x58a <__fixunssfsi+0x24>
 584:	ba 95       	dec	r27
 586:	c9 f7       	brne	.-14     	; 0x57a <__fixunssfsi+0x14>
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <__fixunssfsi+0x4c>
 58a:	b1 30       	cpi	r27, 0x01	; 1
 58c:	91 f0       	breq	.+36     	; 0x5b2 <__fixunssfsi+0x4c>
 58e:	0e 94 90 03 	call	0x720	; 0x720 <__fp_zero>
 592:	b1 e0       	ldi	r27, 0x01	; 1
 594:	08 95       	ret
 596:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_zero>
 59a:	67 2f       	mov	r22, r23
 59c:	78 2f       	mov	r23, r24
 59e:	88 27       	eor	r24, r24
 5a0:	b8 5f       	subi	r27, 0xF8	; 248
 5a2:	39 f0       	breq	.+14     	; 0x5b2 <__fixunssfsi+0x4c>
 5a4:	b9 3f       	cpi	r27, 0xF9	; 249
 5a6:	cc f3       	brlt	.-14     	; 0x59a <__fixunssfsi+0x34>
 5a8:	86 95       	lsr	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b3 95       	inc	r27
 5b0:	d9 f7       	brne	.-10     	; 0x5a8 <__fixunssfsi+0x42>
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__fixunssfsi+0x5c>
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__floatunsisf>:
 5c4:	e8 94       	clt
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <__floatsisf+0x12>

000005c8 <__floatsisf>:
 5c8:	97 fb       	bst	r25, 7
 5ca:	3e f4       	brtc	.+14     	; 0x5da <__floatsisf+0x12>
 5cc:	90 95       	com	r25
 5ce:	80 95       	com	r24
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	99 23       	and	r25, r25
 5dc:	a9 f0       	breq	.+42     	; 0x608 <__floatsisf+0x40>
 5de:	f9 2f       	mov	r31, r25
 5e0:	96 e9       	ldi	r25, 0x96	; 150
 5e2:	bb 27       	eor	r27, r27
 5e4:	93 95       	inc	r25
 5e6:	f6 95       	lsr	r31
 5e8:	87 95       	ror	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	f1 11       	cpse	r31, r1
 5f2:	f8 cf       	rjmp	.-16     	; 0x5e4 <__floatsisf+0x1c>
 5f4:	fa f4       	brpl	.+62     	; 0x634 <__floatsisf+0x6c>
 5f6:	bb 0f       	add	r27, r27
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__floatsisf+0x36>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	1b c0       	rjmp	.+54     	; 0x634 <__floatsisf+0x6c>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	16 c0       	rjmp	.+44     	; 0x634 <__floatsisf+0x6c>
 608:	88 23       	and	r24, r24
 60a:	11 f0       	breq	.+4      	; 0x610 <__floatsisf+0x48>
 60c:	96 e9       	ldi	r25, 0x96	; 150
 60e:	11 c0       	rjmp	.+34     	; 0x632 <__floatsisf+0x6a>
 610:	77 23       	and	r23, r23
 612:	21 f0       	breq	.+8      	; 0x61c <__floatsisf+0x54>
 614:	9e e8       	ldi	r25, 0x8E	; 142
 616:	87 2f       	mov	r24, r23
 618:	76 2f       	mov	r23, r22
 61a:	05 c0       	rjmp	.+10     	; 0x626 <__floatsisf+0x5e>
 61c:	66 23       	and	r22, r22
 61e:	71 f0       	breq	.+28     	; 0x63c <__floatsisf+0x74>
 620:	96 e8       	ldi	r25, 0x86	; 134
 622:	86 2f       	mov	r24, r22
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	2a f0       	brmi	.+10     	; 0x634 <__floatsisf+0x6c>
 62a:	9a 95       	dec	r25
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	da f7       	brpl	.-10     	; 0x62a <__floatsisf+0x62>
 634:	88 0f       	add	r24, r24
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__fp_inf>:
 63e:	97 f9       	bld	r25, 7
 640:	9f 67       	ori	r25, 0x7F	; 127
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	08 95       	ret

0000064a <__fp_nan>:
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	08 95       	ret

00000650 <__fp_powser>:
 650:	df 93       	push	r29
 652:	cf 93       	push	r28
 654:	1f 93       	push	r17
 656:	0f 93       	push	r16
 658:	ff 92       	push	r15
 65a:	ef 92       	push	r14
 65c:	df 92       	push	r13
 65e:	7b 01       	movw	r14, r22
 660:	8c 01       	movw	r16, r24
 662:	68 94       	set
 664:	06 c0       	rjmp	.+12     	; 0x672 <__fp_powser+0x22>
 666:	da 2e       	mov	r13, r26
 668:	ef 01       	movw	r28, r30
 66a:	0e 94 b2 03 	call	0x764	; 0x764 <__mulsf3x>
 66e:	fe 01       	movw	r30, r28
 670:	e8 94       	clt
 672:	a5 91       	lpm	r26, Z+
 674:	25 91       	lpm	r18, Z+
 676:	35 91       	lpm	r19, Z+
 678:	45 91       	lpm	r20, Z+
 67a:	55 91       	lpm	r21, Z+
 67c:	a6 f3       	brts	.-24     	; 0x666 <__fp_powser+0x16>
 67e:	ef 01       	movw	r28, r30
 680:	0e 94 28 04 	call	0x850	; 0x850 <__addsf3x>
 684:	fe 01       	movw	r30, r28
 686:	97 01       	movw	r18, r14
 688:	a8 01       	movw	r20, r16
 68a:	da 94       	dec	r13
 68c:	69 f7       	brne	.-38     	; 0x668 <__fp_powser+0x18>
 68e:	df 90       	pop	r13
 690:	ef 90       	pop	r14
 692:	ff 90       	pop	r15
 694:	0f 91       	pop	r16
 696:	1f 91       	pop	r17
 698:	cf 91       	pop	r28
 69a:	df 91       	pop	r29
 69c:	08 95       	ret

0000069e <__fp_pscA>:
 69e:	00 24       	eor	r0, r0
 6a0:	0a 94       	dec	r0
 6a2:	16 16       	cp	r1, r22
 6a4:	17 06       	cpc	r1, r23
 6a6:	18 06       	cpc	r1, r24
 6a8:	09 06       	cpc	r0, r25
 6aa:	08 95       	ret

000006ac <__fp_pscB>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	12 16       	cp	r1, r18
 6b2:	13 06       	cpc	r1, r19
 6b4:	14 06       	cpc	r1, r20
 6b6:	05 06       	cpc	r0, r21
 6b8:	08 95       	ret

000006ba <__fp_round>:
 6ba:	09 2e       	mov	r0, r25
 6bc:	03 94       	inc	r0
 6be:	00 0c       	add	r0, r0
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__fp_round+0xc>
 6c2:	88 23       	and	r24, r24
 6c4:	52 f0       	brmi	.+20     	; 0x6da <__fp_round+0x20>
 6c6:	bb 0f       	add	r27, r27
 6c8:	40 f4       	brcc	.+16     	; 0x6da <__fp_round+0x20>
 6ca:	bf 2b       	or	r27, r31
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__fp_round+0x18>
 6ce:	60 ff       	sbrs	r22, 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <__fp_round+0x20>
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__fp_split3>:
 6dc:	57 fd       	sbrc	r21, 7
 6de:	90 58       	subi	r25, 0x80	; 128
 6e0:	44 0f       	add	r20, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	59 f0       	breq	.+22     	; 0x6fc <__fp_splitA+0x10>
 6e6:	5f 3f       	cpi	r21, 0xFF	; 255
 6e8:	71 f0       	breq	.+28     	; 0x706 <__fp_splitA+0x1a>
 6ea:	47 95       	ror	r20

000006ec <__fp_splitA>:
 6ec:	88 0f       	add	r24, r24
 6ee:	97 fb       	bst	r25, 7
 6f0:	99 1f       	adc	r25, r25
 6f2:	61 f0       	breq	.+24     	; 0x70c <__fp_splitA+0x20>
 6f4:	9f 3f       	cpi	r25, 0xFF	; 255
 6f6:	79 f0       	breq	.+30     	; 0x716 <__fp_splitA+0x2a>
 6f8:	87 95       	ror	r24
 6fa:	08 95       	ret
 6fc:	12 16       	cp	r1, r18
 6fe:	13 06       	cpc	r1, r19
 700:	14 06       	cpc	r1, r20
 702:	55 1f       	adc	r21, r21
 704:	f2 cf       	rjmp	.-28     	; 0x6ea <__fp_split3+0xe>
 706:	46 95       	lsr	r20
 708:	f1 df       	rcall	.-30     	; 0x6ec <__fp_splitA>
 70a:	08 c0       	rjmp	.+16     	; 0x71c <__fp_splitA+0x30>
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	18 06       	cpc	r1, r24
 712:	99 1f       	adc	r25, r25
 714:	f1 cf       	rjmp	.-30     	; 0x6f8 <__fp_splitA+0xc>
 716:	86 95       	lsr	r24
 718:	71 05       	cpc	r23, r1
 71a:	61 05       	cpc	r22, r1
 71c:	08 94       	sec
 71e:	08 95       	ret

00000720 <__fp_zero>:
 720:	e8 94       	clt

00000722 <__fp_szero>:
 722:	bb 27       	eor	r27, r27
 724:	66 27       	eor	r22, r22
 726:	77 27       	eor	r23, r23
 728:	cb 01       	movw	r24, r22
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <inverse>:
 72e:	9b 01       	movw	r18, r22
 730:	ac 01       	movw	r20, r24
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	9f e3       	ldi	r25, 0x3F	; 63
 73a:	0c 94 3a 02 	jmp	0x474	; 0x474 <__divsf3>

0000073e <__mulsf3>:
 73e:	0e 94 b2 03 	call	0x764	; 0x764 <__mulsf3x>
 742:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_round>
 746:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_pscA>
 74a:	38 f0       	brcs	.+14     	; 0x75a <__mulsf3+0x1c>
 74c:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscB>
 750:	20 f0       	brcs	.+8      	; 0x75a <__mulsf3+0x1c>
 752:	95 23       	and	r25, r21
 754:	11 f0       	breq	.+4      	; 0x75a <__mulsf3+0x1c>
 756:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 75a:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>
 75e:	11 24       	eor	r1, r1
 760:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>

00000764 <__mulsf3x>:
 764:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_split3>
 768:	70 f3       	brcs	.-36     	; 0x746 <__mulsf3+0x8>

0000076a <__mulsf3_pse>:
 76a:	95 9f       	mul	r25, r21
 76c:	c1 f3       	breq	.-16     	; 0x75e <__mulsf3+0x20>
 76e:	95 0f       	add	r25, r21
 770:	50 e0       	ldi	r21, 0x00	; 0
 772:	55 1f       	adc	r21, r21
 774:	62 9f       	mul	r22, r18
 776:	f0 01       	movw	r30, r0
 778:	72 9f       	mul	r23, r18
 77a:	bb 27       	eor	r27, r27
 77c:	f0 0d       	add	r31, r0
 77e:	b1 1d       	adc	r27, r1
 780:	63 9f       	mul	r22, r19
 782:	aa 27       	eor	r26, r26
 784:	f0 0d       	add	r31, r0
 786:	b1 1d       	adc	r27, r1
 788:	aa 1f       	adc	r26, r26
 78a:	64 9f       	mul	r22, r20
 78c:	66 27       	eor	r22, r22
 78e:	b0 0d       	add	r27, r0
 790:	a1 1d       	adc	r26, r1
 792:	66 1f       	adc	r22, r22
 794:	82 9f       	mul	r24, r18
 796:	22 27       	eor	r18, r18
 798:	b0 0d       	add	r27, r0
 79a:	a1 1d       	adc	r26, r1
 79c:	62 1f       	adc	r22, r18
 79e:	73 9f       	mul	r23, r19
 7a0:	b0 0d       	add	r27, r0
 7a2:	a1 1d       	adc	r26, r1
 7a4:	62 1f       	adc	r22, r18
 7a6:	83 9f       	mul	r24, r19
 7a8:	a0 0d       	add	r26, r0
 7aa:	61 1d       	adc	r22, r1
 7ac:	22 1f       	adc	r18, r18
 7ae:	74 9f       	mul	r23, r20
 7b0:	33 27       	eor	r19, r19
 7b2:	a0 0d       	add	r26, r0
 7b4:	61 1d       	adc	r22, r1
 7b6:	23 1f       	adc	r18, r19
 7b8:	84 9f       	mul	r24, r20
 7ba:	60 0d       	add	r22, r0
 7bc:	21 1d       	adc	r18, r1
 7be:	82 2f       	mov	r24, r18
 7c0:	76 2f       	mov	r23, r22
 7c2:	6a 2f       	mov	r22, r26
 7c4:	11 24       	eor	r1, r1
 7c6:	9f 57       	subi	r25, 0x7F	; 127
 7c8:	50 40       	sbci	r21, 0x00	; 0
 7ca:	9a f0       	brmi	.+38     	; 0x7f2 <__mulsf3_pse+0x88>
 7cc:	f1 f0       	breq	.+60     	; 0x80a <__mulsf3_pse+0xa0>
 7ce:	88 23       	and	r24, r24
 7d0:	4a f0       	brmi	.+18     	; 0x7e4 <__mulsf3_pse+0x7a>
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	bb 1f       	adc	r27, r27
 7d8:	66 1f       	adc	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	91 50       	subi	r25, 0x01	; 1
 7e0:	50 40       	sbci	r21, 0x00	; 0
 7e2:	a9 f7       	brne	.-22     	; 0x7ce <__mulsf3_pse+0x64>
 7e4:	9e 3f       	cpi	r25, 0xFE	; 254
 7e6:	51 05       	cpc	r21, r1
 7e8:	80 f0       	brcs	.+32     	; 0x80a <__mulsf3_pse+0xa0>
 7ea:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 7ee:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_szero>
 7f2:	5f 3f       	cpi	r21, 0xFF	; 255
 7f4:	e4 f3       	brlt	.-8      	; 0x7ee <__mulsf3_pse+0x84>
 7f6:	98 3e       	cpi	r25, 0xE8	; 232
 7f8:	d4 f3       	brlt	.-12     	; 0x7ee <__mulsf3_pse+0x84>
 7fa:	86 95       	lsr	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b7 95       	ror	r27
 802:	f7 95       	ror	r31
 804:	e7 95       	ror	r30
 806:	9f 5f       	subi	r25, 0xFF	; 255
 808:	c1 f7       	brne	.-16     	; 0x7fa <__mulsf3_pse+0x90>
 80a:	fe 2b       	or	r31, r30
 80c:	88 0f       	add	r24, r24
 80e:	91 1d       	adc	r25, r1
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret

00000818 <square>:
 818:	9b 01       	movw	r18, r22
 81a:	ac 01       	movw	r20, r24
 81c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__mulsf3>

00000820 <__subsf3>:
 820:	50 58       	subi	r21, 0x80	; 128

00000822 <__addsf3>:
 822:	bb 27       	eor	r27, r27
 824:	aa 27       	eor	r26, r26
 826:	0e 94 28 04 	call	0x850	; 0x850 <__addsf3x>
 82a:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_round>
 82e:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_pscA>
 832:	38 f0       	brcs	.+14     	; 0x842 <__addsf3+0x20>
 834:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscB>
 838:	20 f0       	brcs	.+8      	; 0x842 <__addsf3+0x20>
 83a:	39 f4       	brne	.+14     	; 0x84a <__addsf3+0x28>
 83c:	9f 3f       	cpi	r25, 0xFF	; 255
 83e:	19 f4       	brne	.+6      	; 0x846 <__addsf3+0x24>
 840:	26 f4       	brtc	.+8      	; 0x84a <__addsf3+0x28>
 842:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>
 846:	0e f4       	brtc	.+2      	; 0x84a <__addsf3+0x28>
 848:	e0 95       	com	r30
 84a:	e7 fb       	bst	r30, 7
 84c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>

00000850 <__addsf3x>:
 850:	e9 2f       	mov	r30, r25
 852:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_split3>
 856:	58 f3       	brcs	.-42     	; 0x82e <__addsf3+0xc>
 858:	ba 17       	cp	r27, r26
 85a:	62 07       	cpc	r22, r18
 85c:	73 07       	cpc	r23, r19
 85e:	84 07       	cpc	r24, r20
 860:	95 07       	cpc	r25, r21
 862:	20 f0       	brcs	.+8      	; 0x86c <__addsf3x+0x1c>
 864:	79 f4       	brne	.+30     	; 0x884 <__addsf3x+0x34>
 866:	a6 f5       	brtc	.+104    	; 0x8d0 <__addsf3x+0x80>
 868:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_zero>
 86c:	0e f4       	brtc	.+2      	; 0x870 <__addsf3x+0x20>
 86e:	e0 95       	com	r30
 870:	0b 2e       	mov	r0, r27
 872:	ba 2f       	mov	r27, r26
 874:	a0 2d       	mov	r26, r0
 876:	0b 01       	movw	r0, r22
 878:	b9 01       	movw	r22, r18
 87a:	90 01       	movw	r18, r0
 87c:	0c 01       	movw	r0, r24
 87e:	ca 01       	movw	r24, r20
 880:	a0 01       	movw	r20, r0
 882:	11 24       	eor	r1, r1
 884:	ff 27       	eor	r31, r31
 886:	59 1b       	sub	r21, r25
 888:	99 f0       	breq	.+38     	; 0x8b0 <__addsf3x+0x60>
 88a:	59 3f       	cpi	r21, 0xF9	; 249
 88c:	50 f4       	brcc	.+20     	; 0x8a2 <__addsf3x+0x52>
 88e:	50 3e       	cpi	r21, 0xE0	; 224
 890:	68 f1       	brcs	.+90     	; 0x8ec <__addsf3x+0x9c>
 892:	1a 16       	cp	r1, r26
 894:	f0 40       	sbci	r31, 0x00	; 0
 896:	a2 2f       	mov	r26, r18
 898:	23 2f       	mov	r18, r19
 89a:	34 2f       	mov	r19, r20
 89c:	44 27       	eor	r20, r20
 89e:	58 5f       	subi	r21, 0xF8	; 248
 8a0:	f3 cf       	rjmp	.-26     	; 0x888 <__addsf3x+0x38>
 8a2:	46 95       	lsr	r20
 8a4:	37 95       	ror	r19
 8a6:	27 95       	ror	r18
 8a8:	a7 95       	ror	r26
 8aa:	f0 40       	sbci	r31, 0x00	; 0
 8ac:	53 95       	inc	r21
 8ae:	c9 f7       	brne	.-14     	; 0x8a2 <__addsf3x+0x52>
 8b0:	7e f4       	brtc	.+30     	; 0x8d0 <__addsf3x+0x80>
 8b2:	1f 16       	cp	r1, r31
 8b4:	ba 0b       	sbc	r27, r26
 8b6:	62 0b       	sbc	r22, r18
 8b8:	73 0b       	sbc	r23, r19
 8ba:	84 0b       	sbc	r24, r20
 8bc:	ba f0       	brmi	.+46     	; 0x8ec <__addsf3x+0x9c>
 8be:	91 50       	subi	r25, 0x01	; 1
 8c0:	a1 f0       	breq	.+40     	; 0x8ea <__addsf3x+0x9a>
 8c2:	ff 0f       	add	r31, r31
 8c4:	bb 1f       	adc	r27, r27
 8c6:	66 1f       	adc	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	c2 f7       	brpl	.-16     	; 0x8be <__addsf3x+0x6e>
 8ce:	0e c0       	rjmp	.+28     	; 0x8ec <__addsf3x+0x9c>
 8d0:	ba 0f       	add	r27, r26
 8d2:	62 1f       	adc	r22, r18
 8d4:	73 1f       	adc	r23, r19
 8d6:	84 1f       	adc	r24, r20
 8d8:	48 f4       	brcc	.+18     	; 0x8ec <__addsf3x+0x9c>
 8da:	87 95       	ror	r24
 8dc:	77 95       	ror	r23
 8de:	67 95       	ror	r22
 8e0:	b7 95       	ror	r27
 8e2:	f7 95       	ror	r31
 8e4:	9e 3f       	cpi	r25, 0xFE	; 254
 8e6:	08 f0       	brcs	.+2      	; 0x8ea <__addsf3x+0x9a>
 8e8:	b0 cf       	rjmp	.-160    	; 0x84a <__addsf3+0x28>
 8ea:	93 95       	inc	r25
 8ec:	88 0f       	add	r24, r24
 8ee:	08 f0       	brcs	.+2      	; 0x8f2 <__addsf3x+0xa2>
 8f0:	99 27       	eor	r25, r25
 8f2:	ee 0f       	add	r30, r30
 8f4:	97 95       	ror	r25
 8f6:	87 95       	ror	r24
 8f8:	08 95       	ret

000008fa <printf>:
 8fa:	a0 e0       	ldi	r26, 0x00	; 0
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	e3 e8       	ldi	r30, 0x83	; 131
 900:	f4 e0       	ldi	r31, 0x04	; 4
 902:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__prologue_saves__+0x20>
 906:	ae 01       	movw	r20, r28
 908:	4b 5f       	subi	r20, 0xFB	; 251
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	fa 01       	movw	r30, r20
 90e:	61 91       	ld	r22, Z+
 910:	71 91       	ld	r23, Z+
 912:	af 01       	movw	r20, r30
 914:	80 91 2a 01 	lds	r24, 0x012A
 918:	90 91 2b 01 	lds	r25, 0x012B
 91c:	0e 94 c3 04 	call	0x986	; 0x986 <vfprintf>
 920:	e2 e0       	ldi	r30, 0x02	; 2
 922:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__epilogue_restores__+0x20>

00000926 <puts>:
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	e0 91 2a 01 	lds	r30, 0x012A
 932:	f0 91 2b 01 	lds	r31, 0x012B
 936:	23 81       	ldd	r18, Z+3	; 0x03
 938:	21 ff       	sbrs	r18, 1
 93a:	1b c0       	rjmp	.+54     	; 0x972 <puts+0x4c>
 93c:	8c 01       	movw	r16, r24
 93e:	d0 e0       	ldi	r29, 0x00	; 0
 940:	c0 e0       	ldi	r28, 0x00	; 0
 942:	f8 01       	movw	r30, r16
 944:	81 91       	ld	r24, Z+
 946:	8f 01       	movw	r16, r30
 948:	60 91 2a 01 	lds	r22, 0x012A
 94c:	70 91 2b 01 	lds	r23, 0x012B
 950:	db 01       	movw	r26, r22
 952:	18 96       	adiw	r26, 0x08	; 8
 954:	ed 91       	ld	r30, X+
 956:	fc 91       	ld	r31, X
 958:	19 97       	sbiw	r26, 0x09	; 9
 95a:	88 23       	and	r24, r24
 95c:	31 f0       	breq	.+12     	; 0x96a <puts+0x44>
 95e:	09 95       	icall
 960:	89 2b       	or	r24, r25
 962:	79 f3       	breq	.-34     	; 0x942 <puts+0x1c>
 964:	df ef       	ldi	r29, 0xFF	; 255
 966:	cf ef       	ldi	r28, 0xFF	; 255
 968:	ec cf       	rjmp	.-40     	; 0x942 <puts+0x1c>
 96a:	8a e0       	ldi	r24, 0x0A	; 10
 96c:	09 95       	icall
 96e:	89 2b       	or	r24, r25
 970:	19 f0       	breq	.+6      	; 0x978 <puts+0x52>
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	9f ef       	ldi	r25, 0xFF	; 255
 976:	02 c0       	rjmp	.+4      	; 0x97c <puts+0x56>
 978:	8d 2f       	mov	r24, r29
 97a:	9c 2f       	mov	r25, r28
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	1f 91       	pop	r17
 982:	0f 91       	pop	r16
 984:	08 95       	ret

00000986 <vfprintf>:
 986:	ac e0       	ldi	r26, 0x0C	; 12
 988:	b0 e0       	ldi	r27, 0x00	; 0
 98a:	e9 ec       	ldi	r30, 0xC9	; 201
 98c:	f4 e0       	ldi	r31, 0x04	; 4
 98e:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__prologue_saves__>
 992:	7c 01       	movw	r14, r24
 994:	6b 01       	movw	r12, r22
 996:	8a 01       	movw	r16, r20
 998:	fc 01       	movw	r30, r24
 99a:	17 82       	std	Z+7, r1	; 0x07
 99c:	16 82       	std	Z+6, r1	; 0x06
 99e:	83 81       	ldd	r24, Z+3	; 0x03
 9a0:	81 ff       	sbrs	r24, 1
 9a2:	bd c1       	rjmp	.+890    	; 0xd1e <vfprintf+0x398>
 9a4:	ce 01       	movw	r24, r28
 9a6:	01 96       	adiw	r24, 0x01	; 1
 9a8:	4c 01       	movw	r8, r24
 9aa:	f7 01       	movw	r30, r14
 9ac:	93 81       	ldd	r25, Z+3	; 0x03
 9ae:	f6 01       	movw	r30, r12
 9b0:	93 fd       	sbrc	r25, 3
 9b2:	85 91       	lpm	r24, Z+
 9b4:	93 ff       	sbrs	r25, 3
 9b6:	81 91       	ld	r24, Z+
 9b8:	6f 01       	movw	r12, r30
 9ba:	88 23       	and	r24, r24
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <vfprintf+0x3a>
 9be:	ab c1       	rjmp	.+854    	; 0xd16 <vfprintf+0x390>
 9c0:	85 32       	cpi	r24, 0x25	; 37
 9c2:	39 f4       	brne	.+14     	; 0x9d2 <vfprintf+0x4c>
 9c4:	93 fd       	sbrc	r25, 3
 9c6:	85 91       	lpm	r24, Z+
 9c8:	93 ff       	sbrs	r25, 3
 9ca:	81 91       	ld	r24, Z+
 9cc:	6f 01       	movw	r12, r30
 9ce:	85 32       	cpi	r24, 0x25	; 37
 9d0:	29 f4       	brne	.+10     	; 0x9dc <vfprintf+0x56>
 9d2:	b7 01       	movw	r22, r14
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 9da:	e7 cf       	rjmp	.-50     	; 0x9aa <vfprintf+0x24>
 9dc:	51 2c       	mov	r5, r1
 9de:	31 2c       	mov	r3, r1
 9e0:	20 e0       	ldi	r18, 0x00	; 0
 9e2:	20 32       	cpi	r18, 0x20	; 32
 9e4:	a0 f4       	brcc	.+40     	; 0xa0e <vfprintf+0x88>
 9e6:	8b 32       	cpi	r24, 0x2B	; 43
 9e8:	69 f0       	breq	.+26     	; 0xa04 <vfprintf+0x7e>
 9ea:	30 f4       	brcc	.+12     	; 0x9f8 <vfprintf+0x72>
 9ec:	80 32       	cpi	r24, 0x20	; 32
 9ee:	59 f0       	breq	.+22     	; 0xa06 <vfprintf+0x80>
 9f0:	83 32       	cpi	r24, 0x23	; 35
 9f2:	69 f4       	brne	.+26     	; 0xa0e <vfprintf+0x88>
 9f4:	20 61       	ori	r18, 0x10	; 16
 9f6:	2c c0       	rjmp	.+88     	; 0xa50 <vfprintf+0xca>
 9f8:	8d 32       	cpi	r24, 0x2D	; 45
 9fa:	39 f0       	breq	.+14     	; 0xa0a <vfprintf+0x84>
 9fc:	80 33       	cpi	r24, 0x30	; 48
 9fe:	39 f4       	brne	.+14     	; 0xa0e <vfprintf+0x88>
 a00:	21 60       	ori	r18, 0x01	; 1
 a02:	26 c0       	rjmp	.+76     	; 0xa50 <vfprintf+0xca>
 a04:	22 60       	ori	r18, 0x02	; 2
 a06:	24 60       	ori	r18, 0x04	; 4
 a08:	23 c0       	rjmp	.+70     	; 0xa50 <vfprintf+0xca>
 a0a:	28 60       	ori	r18, 0x08	; 8
 a0c:	21 c0       	rjmp	.+66     	; 0xa50 <vfprintf+0xca>
 a0e:	27 fd       	sbrc	r18, 7
 a10:	27 c0       	rjmp	.+78     	; 0xa60 <vfprintf+0xda>
 a12:	30 ed       	ldi	r19, 0xD0	; 208
 a14:	38 0f       	add	r19, r24
 a16:	3a 30       	cpi	r19, 0x0A	; 10
 a18:	78 f4       	brcc	.+30     	; 0xa38 <vfprintf+0xb2>
 a1a:	26 ff       	sbrs	r18, 6
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <vfprintf+0xa4>
 a1e:	fa e0       	ldi	r31, 0x0A	; 10
 a20:	5f 9e       	mul	r5, r31
 a22:	30 0d       	add	r19, r0
 a24:	11 24       	eor	r1, r1
 a26:	53 2e       	mov	r5, r19
 a28:	13 c0       	rjmp	.+38     	; 0xa50 <vfprintf+0xca>
 a2a:	8a e0       	ldi	r24, 0x0A	; 10
 a2c:	38 9e       	mul	r3, r24
 a2e:	30 0d       	add	r19, r0
 a30:	11 24       	eor	r1, r1
 a32:	33 2e       	mov	r3, r19
 a34:	20 62       	ori	r18, 0x20	; 32
 a36:	0c c0       	rjmp	.+24     	; 0xa50 <vfprintf+0xca>
 a38:	8e 32       	cpi	r24, 0x2E	; 46
 a3a:	21 f4       	brne	.+8      	; 0xa44 <vfprintf+0xbe>
 a3c:	26 fd       	sbrc	r18, 6
 a3e:	6b c1       	rjmp	.+726    	; 0xd16 <vfprintf+0x390>
 a40:	20 64       	ori	r18, 0x40	; 64
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <vfprintf+0xca>
 a44:	8c 36       	cpi	r24, 0x6C	; 108
 a46:	11 f4       	brne	.+4      	; 0xa4c <vfprintf+0xc6>
 a48:	20 68       	ori	r18, 0x80	; 128
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0xca>
 a4c:	88 36       	cpi	r24, 0x68	; 104
 a4e:	41 f4       	brne	.+16     	; 0xa60 <vfprintf+0xda>
 a50:	f6 01       	movw	r30, r12
 a52:	93 fd       	sbrc	r25, 3
 a54:	85 91       	lpm	r24, Z+
 a56:	93 ff       	sbrs	r25, 3
 a58:	81 91       	ld	r24, Z+
 a5a:	6f 01       	movw	r12, r30
 a5c:	81 11       	cpse	r24, r1
 a5e:	c1 cf       	rjmp	.-126    	; 0x9e2 <vfprintf+0x5c>
 a60:	98 2f       	mov	r25, r24
 a62:	9f 7d       	andi	r25, 0xDF	; 223
 a64:	95 54       	subi	r25, 0x45	; 69
 a66:	93 30       	cpi	r25, 0x03	; 3
 a68:	28 f4       	brcc	.+10     	; 0xa74 <vfprintf+0xee>
 a6a:	0c 5f       	subi	r16, 0xFC	; 252
 a6c:	1f 4f       	sbci	r17, 0xFF	; 255
 a6e:	ff e3       	ldi	r31, 0x3F	; 63
 a70:	f9 83       	std	Y+1, r31	; 0x01
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <vfprintf+0x108>
 a74:	83 36       	cpi	r24, 0x63	; 99
 a76:	31 f0       	breq	.+12     	; 0xa84 <vfprintf+0xfe>
 a78:	83 37       	cpi	r24, 0x73	; 115
 a7a:	71 f0       	breq	.+28     	; 0xa98 <vfprintf+0x112>
 a7c:	83 35       	cpi	r24, 0x53	; 83
 a7e:	09 f0       	breq	.+2      	; 0xa82 <vfprintf+0xfc>
 a80:	5b c0       	rjmp	.+182    	; 0xb38 <vfprintf+0x1b2>
 a82:	22 c0       	rjmp	.+68     	; 0xac8 <vfprintf+0x142>
 a84:	f8 01       	movw	r30, r16
 a86:	80 81       	ld	r24, Z
 a88:	89 83       	std	Y+1, r24	; 0x01
 a8a:	0e 5f       	subi	r16, 0xFE	; 254
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	44 24       	eor	r4, r4
 a90:	43 94       	inc	r4
 a92:	51 2c       	mov	r5, r1
 a94:	54 01       	movw	r10, r8
 a96:	15 c0       	rjmp	.+42     	; 0xac2 <vfprintf+0x13c>
 a98:	38 01       	movw	r6, r16
 a9a:	f2 e0       	ldi	r31, 0x02	; 2
 a9c:	6f 0e       	add	r6, r31
 a9e:	71 1c       	adc	r7, r1
 aa0:	f8 01       	movw	r30, r16
 aa2:	a0 80       	ld	r10, Z
 aa4:	b1 80       	ldd	r11, Z+1	; 0x01
 aa6:	26 ff       	sbrs	r18, 6
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <vfprintf+0x12a>
 aaa:	65 2d       	mov	r22, r5
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <vfprintf+0x12e>
 ab0:	6f ef       	ldi	r22, 0xFF	; 255
 ab2:	7f ef       	ldi	r23, 0xFF	; 255
 ab4:	c5 01       	movw	r24, r10
 ab6:	2c 87       	std	Y+12, r18	; 0x0c
 ab8:	0e 94 a0 06 	call	0xd40	; 0xd40 <strnlen>
 abc:	2c 01       	movw	r4, r24
 abe:	83 01       	movw	r16, r6
 ac0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac2:	2f 77       	andi	r18, 0x7F	; 127
 ac4:	22 2e       	mov	r2, r18
 ac6:	17 c0       	rjmp	.+46     	; 0xaf6 <vfprintf+0x170>
 ac8:	38 01       	movw	r6, r16
 aca:	f2 e0       	ldi	r31, 0x02	; 2
 acc:	6f 0e       	add	r6, r31
 ace:	71 1c       	adc	r7, r1
 ad0:	f8 01       	movw	r30, r16
 ad2:	a0 80       	ld	r10, Z
 ad4:	b1 80       	ldd	r11, Z+1	; 0x01
 ad6:	26 ff       	sbrs	r18, 6
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <vfprintf+0x15a>
 ada:	65 2d       	mov	r22, r5
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <vfprintf+0x15e>
 ae0:	6f ef       	ldi	r22, 0xFF	; 255
 ae2:	7f ef       	ldi	r23, 0xFF	; 255
 ae4:	c5 01       	movw	r24, r10
 ae6:	2c 87       	std	Y+12, r18	; 0x0c
 ae8:	0e 94 95 06 	call	0xd2a	; 0xd2a <strnlen_P>
 aec:	2c 01       	movw	r4, r24
 aee:	2c 85       	ldd	r18, Y+12	; 0x0c
 af0:	20 68       	ori	r18, 0x80	; 128
 af2:	22 2e       	mov	r2, r18
 af4:	83 01       	movw	r16, r6
 af6:	23 fc       	sbrc	r2, 3
 af8:	1b c0       	rjmp	.+54     	; 0xb30 <vfprintf+0x1aa>
 afa:	83 2d       	mov	r24, r3
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	48 16       	cp	r4, r24
 b00:	59 06       	cpc	r5, r25
 b02:	b0 f4       	brcc	.+44     	; 0xb30 <vfprintf+0x1aa>
 b04:	b7 01       	movw	r22, r14
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 b0e:	3a 94       	dec	r3
 b10:	f4 cf       	rjmp	.-24     	; 0xafa <vfprintf+0x174>
 b12:	f5 01       	movw	r30, r10
 b14:	27 fc       	sbrc	r2, 7
 b16:	85 91       	lpm	r24, Z+
 b18:	27 fe       	sbrs	r2, 7
 b1a:	81 91       	ld	r24, Z+
 b1c:	5f 01       	movw	r10, r30
 b1e:	b7 01       	movw	r22, r14
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 b26:	31 10       	cpse	r3, r1
 b28:	3a 94       	dec	r3
 b2a:	f1 e0       	ldi	r31, 0x01	; 1
 b2c:	4f 1a       	sub	r4, r31
 b2e:	51 08       	sbc	r5, r1
 b30:	41 14       	cp	r4, r1
 b32:	51 04       	cpc	r5, r1
 b34:	71 f7       	brne	.-36     	; 0xb12 <vfprintf+0x18c>
 b36:	e5 c0       	rjmp	.+458    	; 0xd02 <vfprintf+0x37c>
 b38:	84 36       	cpi	r24, 0x64	; 100
 b3a:	11 f0       	breq	.+4      	; 0xb40 <vfprintf+0x1ba>
 b3c:	89 36       	cpi	r24, 0x69	; 105
 b3e:	39 f5       	brne	.+78     	; 0xb8e <vfprintf+0x208>
 b40:	f8 01       	movw	r30, r16
 b42:	27 ff       	sbrs	r18, 7
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <vfprintf+0x1ce>
 b46:	60 81       	ld	r22, Z
 b48:	71 81       	ldd	r23, Z+1	; 0x01
 b4a:	82 81       	ldd	r24, Z+2	; 0x02
 b4c:	93 81       	ldd	r25, Z+3	; 0x03
 b4e:	0c 5f       	subi	r16, 0xFC	; 252
 b50:	1f 4f       	sbci	r17, 0xFF	; 255
 b52:	08 c0       	rjmp	.+16     	; 0xb64 <vfprintf+0x1de>
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	07 2e       	mov	r0, r23
 b5a:	00 0c       	add	r0, r0
 b5c:	88 0b       	sbc	r24, r24
 b5e:	99 0b       	sbc	r25, r25
 b60:	0e 5f       	subi	r16, 0xFE	; 254
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	2f 76       	andi	r18, 0x6F	; 111
 b66:	72 2e       	mov	r7, r18
 b68:	97 ff       	sbrs	r25, 7
 b6a:	09 c0       	rjmp	.+18     	; 0xb7e <vfprintf+0x1f8>
 b6c:	90 95       	com	r25
 b6e:	80 95       	com	r24
 b70:	70 95       	com	r23
 b72:	61 95       	neg	r22
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	8f 4f       	sbci	r24, 0xFF	; 255
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	20 68       	ori	r18, 0x80	; 128
 b7c:	72 2e       	mov	r7, r18
 b7e:	2a e0       	ldi	r18, 0x0A	; 10
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	a4 01       	movw	r20, r8
 b84:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__ultoa_invert>
 b88:	a8 2e       	mov	r10, r24
 b8a:	a8 18       	sub	r10, r8
 b8c:	44 c0       	rjmp	.+136    	; 0xc16 <vfprintf+0x290>
 b8e:	85 37       	cpi	r24, 0x75	; 117
 b90:	29 f4       	brne	.+10     	; 0xb9c <vfprintf+0x216>
 b92:	2f 7e       	andi	r18, 0xEF	; 239
 b94:	b2 2e       	mov	r11, r18
 b96:	2a e0       	ldi	r18, 0x0A	; 10
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	25 c0       	rjmp	.+74     	; 0xbe6 <vfprintf+0x260>
 b9c:	f2 2f       	mov	r31, r18
 b9e:	f9 7f       	andi	r31, 0xF9	; 249
 ba0:	bf 2e       	mov	r11, r31
 ba2:	8f 36       	cpi	r24, 0x6F	; 111
 ba4:	c1 f0       	breq	.+48     	; 0xbd6 <vfprintf+0x250>
 ba6:	18 f4       	brcc	.+6      	; 0xbae <vfprintf+0x228>
 ba8:	88 35       	cpi	r24, 0x58	; 88
 baa:	79 f0       	breq	.+30     	; 0xbca <vfprintf+0x244>
 bac:	b4 c0       	rjmp	.+360    	; 0xd16 <vfprintf+0x390>
 bae:	80 37       	cpi	r24, 0x70	; 112
 bb0:	19 f0       	breq	.+6      	; 0xbb8 <vfprintf+0x232>
 bb2:	88 37       	cpi	r24, 0x78	; 120
 bb4:	21 f0       	breq	.+8      	; 0xbbe <vfprintf+0x238>
 bb6:	af c0       	rjmp	.+350    	; 0xd16 <vfprintf+0x390>
 bb8:	2f 2f       	mov	r18, r31
 bba:	20 61       	ori	r18, 0x10	; 16
 bbc:	b2 2e       	mov	r11, r18
 bbe:	b4 fe       	sbrs	r11, 4
 bc0:	0d c0       	rjmp	.+26     	; 0xbdc <vfprintf+0x256>
 bc2:	8b 2d       	mov	r24, r11
 bc4:	84 60       	ori	r24, 0x04	; 4
 bc6:	b8 2e       	mov	r11, r24
 bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vfprintf+0x256>
 bca:	24 ff       	sbrs	r18, 4
 bcc:	0a c0       	rjmp	.+20     	; 0xbe2 <vfprintf+0x25c>
 bce:	9f 2f       	mov	r25, r31
 bd0:	96 60       	ori	r25, 0x06	; 6
 bd2:	b9 2e       	mov	r11, r25
 bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <vfprintf+0x25c>
 bd6:	28 e0       	ldi	r18, 0x08	; 8
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	05 c0       	rjmp	.+10     	; 0xbe6 <vfprintf+0x260>
 bdc:	20 e1       	ldi	r18, 0x10	; 16
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <vfprintf+0x260>
 be2:	20 e1       	ldi	r18, 0x10	; 16
 be4:	32 e0       	ldi	r19, 0x02	; 2
 be6:	f8 01       	movw	r30, r16
 be8:	b7 fe       	sbrs	r11, 7
 bea:	07 c0       	rjmp	.+14     	; 0xbfa <vfprintf+0x274>
 bec:	60 81       	ld	r22, Z
 bee:	71 81       	ldd	r23, Z+1	; 0x01
 bf0:	82 81       	ldd	r24, Z+2	; 0x02
 bf2:	93 81       	ldd	r25, Z+3	; 0x03
 bf4:	0c 5f       	subi	r16, 0xFC	; 252
 bf6:	1f 4f       	sbci	r17, 0xFF	; 255
 bf8:	06 c0       	rjmp	.+12     	; 0xc06 <vfprintf+0x280>
 bfa:	60 81       	ld	r22, Z
 bfc:	71 81       	ldd	r23, Z+1	; 0x01
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 5f       	subi	r16, 0xFE	; 254
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	a4 01       	movw	r20, r8
 c08:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__ultoa_invert>
 c0c:	a8 2e       	mov	r10, r24
 c0e:	a8 18       	sub	r10, r8
 c10:	fb 2d       	mov	r31, r11
 c12:	ff 77       	andi	r31, 0x7F	; 127
 c14:	7f 2e       	mov	r7, r31
 c16:	76 fe       	sbrs	r7, 6
 c18:	0b c0       	rjmp	.+22     	; 0xc30 <vfprintf+0x2aa>
 c1a:	37 2d       	mov	r19, r7
 c1c:	3e 7f       	andi	r19, 0xFE	; 254
 c1e:	a5 14       	cp	r10, r5
 c20:	50 f4       	brcc	.+20     	; 0xc36 <vfprintf+0x2b0>
 c22:	74 fe       	sbrs	r7, 4
 c24:	0a c0       	rjmp	.+20     	; 0xc3a <vfprintf+0x2b4>
 c26:	72 fc       	sbrc	r7, 2
 c28:	08 c0       	rjmp	.+16     	; 0xc3a <vfprintf+0x2b4>
 c2a:	37 2d       	mov	r19, r7
 c2c:	3e 7e       	andi	r19, 0xEE	; 238
 c2e:	05 c0       	rjmp	.+10     	; 0xc3a <vfprintf+0x2b4>
 c30:	ba 2c       	mov	r11, r10
 c32:	37 2d       	mov	r19, r7
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <vfprintf+0x2b6>
 c36:	ba 2c       	mov	r11, r10
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <vfprintf+0x2b6>
 c3a:	b5 2c       	mov	r11, r5
 c3c:	34 ff       	sbrs	r19, 4
 c3e:	0d c0       	rjmp	.+26     	; 0xc5a <vfprintf+0x2d4>
 c40:	fe 01       	movw	r30, r28
 c42:	ea 0d       	add	r30, r10
 c44:	f1 1d       	adc	r31, r1
 c46:	80 81       	ld	r24, Z
 c48:	80 33       	cpi	r24, 0x30	; 48
 c4a:	11 f4       	brne	.+4      	; 0xc50 <vfprintf+0x2ca>
 c4c:	39 7e       	andi	r19, 0xE9	; 233
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <vfprintf+0x2dc>
 c50:	32 ff       	sbrs	r19, 2
 c52:	06 c0       	rjmp	.+12     	; 0xc60 <vfprintf+0x2da>
 c54:	b3 94       	inc	r11
 c56:	b3 94       	inc	r11
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <vfprintf+0x2dc>
 c5a:	83 2f       	mov	r24, r19
 c5c:	86 78       	andi	r24, 0x86	; 134
 c5e:	09 f0       	breq	.+2      	; 0xc62 <vfprintf+0x2dc>
 c60:	b3 94       	inc	r11
 c62:	33 fd       	sbrc	r19, 3
 c64:	13 c0       	rjmp	.+38     	; 0xc8c <vfprintf+0x306>
 c66:	30 ff       	sbrs	r19, 0
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <vfprintf+0x2f0>
 c6a:	5a 2c       	mov	r5, r10
 c6c:	b3 14       	cp	r11, r3
 c6e:	18 f4       	brcc	.+6      	; 0xc76 <vfprintf+0x2f0>
 c70:	53 0c       	add	r5, r3
 c72:	5b 18       	sub	r5, r11
 c74:	b3 2c       	mov	r11, r3
 c76:	b3 14       	cp	r11, r3
 c78:	68 f4       	brcc	.+26     	; 0xc94 <vfprintf+0x30e>
 c7a:	b7 01       	movw	r22, r14
 c7c:	80 e2       	ldi	r24, 0x20	; 32
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	3c 87       	std	Y+12, r19	; 0x0c
 c82:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 c86:	b3 94       	inc	r11
 c88:	3c 85       	ldd	r19, Y+12	; 0x0c
 c8a:	f5 cf       	rjmp	.-22     	; 0xc76 <vfprintf+0x2f0>
 c8c:	b3 14       	cp	r11, r3
 c8e:	10 f4       	brcc	.+4      	; 0xc94 <vfprintf+0x30e>
 c90:	3b 18       	sub	r3, r11
 c92:	01 c0       	rjmp	.+2      	; 0xc96 <vfprintf+0x310>
 c94:	31 2c       	mov	r3, r1
 c96:	34 ff       	sbrs	r19, 4
 c98:	12 c0       	rjmp	.+36     	; 0xcbe <vfprintf+0x338>
 c9a:	b7 01       	movw	r22, r14
 c9c:	80 e3       	ldi	r24, 0x30	; 48
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	3c 87       	std	Y+12, r19	; 0x0c
 ca2:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 ca6:	3c 85       	ldd	r19, Y+12	; 0x0c
 ca8:	32 ff       	sbrs	r19, 2
 caa:	17 c0       	rjmp	.+46     	; 0xcda <vfprintf+0x354>
 cac:	31 fd       	sbrc	r19, 1
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <vfprintf+0x330>
 cb0:	88 e7       	ldi	r24, 0x78	; 120
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x334>
 cb6:	88 e5       	ldi	r24, 0x58	; 88
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	b7 01       	movw	r22, r14
 cbc:	0c c0       	rjmp	.+24     	; 0xcd6 <vfprintf+0x350>
 cbe:	83 2f       	mov	r24, r19
 cc0:	86 78       	andi	r24, 0x86	; 134
 cc2:	59 f0       	breq	.+22     	; 0xcda <vfprintf+0x354>
 cc4:	31 ff       	sbrs	r19, 1
 cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x346>
 cc8:	8b e2       	ldi	r24, 0x2B	; 43
 cca:	01 c0       	rjmp	.+2      	; 0xcce <vfprintf+0x348>
 ccc:	80 e2       	ldi	r24, 0x20	; 32
 cce:	37 fd       	sbrc	r19, 7
 cd0:	8d e2       	ldi	r24, 0x2D	; 45
 cd2:	b7 01       	movw	r22, r14
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 cda:	a5 14       	cp	r10, r5
 cdc:	38 f4       	brcc	.+14     	; 0xcec <vfprintf+0x366>
 cde:	b7 01       	movw	r22, r14
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 ce8:	5a 94       	dec	r5
 cea:	f7 cf       	rjmp	.-18     	; 0xcda <vfprintf+0x354>
 cec:	aa 94       	dec	r10
 cee:	f4 01       	movw	r30, r8
 cf0:	ea 0d       	add	r30, r10
 cf2:	f1 1d       	adc	r31, r1
 cf4:	80 81       	ld	r24, Z
 cf6:	b7 01       	movw	r22, r14
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 cfe:	a1 10       	cpse	r10, r1
 d00:	f5 cf       	rjmp	.-22     	; 0xcec <vfprintf+0x366>
 d02:	33 20       	and	r3, r3
 d04:	09 f4       	brne	.+2      	; 0xd08 <vfprintf+0x382>
 d06:	51 ce       	rjmp	.-862    	; 0x9aa <vfprintf+0x24>
 d08:	b7 01       	movw	r22, r14
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	0e 94 ab 06 	call	0xd56	; 0xd56 <fputc>
 d12:	3a 94       	dec	r3
 d14:	f6 cf       	rjmp	.-20     	; 0xd02 <vfprintf+0x37c>
 d16:	f7 01       	movw	r30, r14
 d18:	86 81       	ldd	r24, Z+6	; 0x06
 d1a:	97 81       	ldd	r25, Z+7	; 0x07
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x39c>
 d1e:	8f ef       	ldi	r24, 0xFF	; 255
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	2c 96       	adiw	r28, 0x0c	; 12
 d24:	e2 e1       	ldi	r30, 0x12	; 18
 d26:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__epilogue_restores__>

00000d2a <strnlen_P>:
 d2a:	fc 01       	movw	r30, r24
 d2c:	05 90       	lpm	r0, Z+
 d2e:	61 50       	subi	r22, 0x01	; 1
 d30:	70 40       	sbci	r23, 0x00	; 0
 d32:	01 10       	cpse	r0, r1
 d34:	d8 f7       	brcc	.-10     	; 0xd2c <strnlen_P+0x2>
 d36:	80 95       	com	r24
 d38:	90 95       	com	r25
 d3a:	8e 0f       	add	r24, r30
 d3c:	9f 1f       	adc	r25, r31
 d3e:	08 95       	ret

00000d40 <strnlen>:
 d40:	fc 01       	movw	r30, r24
 d42:	61 50       	subi	r22, 0x01	; 1
 d44:	70 40       	sbci	r23, 0x00	; 0
 d46:	01 90       	ld	r0, Z+
 d48:	01 10       	cpse	r0, r1
 d4a:	d8 f7       	brcc	.-10     	; 0xd42 <strnlen+0x2>
 d4c:	80 95       	com	r24
 d4e:	90 95       	com	r25
 d50:	8e 0f       	add	r24, r30
 d52:	9f 1f       	adc	r25, r31
 d54:	08 95       	ret

00000d56 <fputc>:
 d56:	0f 93       	push	r16
 d58:	1f 93       	push	r17
 d5a:	cf 93       	push	r28
 d5c:	df 93       	push	r29
 d5e:	fb 01       	movw	r30, r22
 d60:	23 81       	ldd	r18, Z+3	; 0x03
 d62:	21 fd       	sbrc	r18, 1
 d64:	03 c0       	rjmp	.+6      	; 0xd6c <fputc+0x16>
 d66:	8f ef       	ldi	r24, 0xFF	; 255
 d68:	9f ef       	ldi	r25, 0xFF	; 255
 d6a:	28 c0       	rjmp	.+80     	; 0xdbc <fputc+0x66>
 d6c:	22 ff       	sbrs	r18, 2
 d6e:	16 c0       	rjmp	.+44     	; 0xd9c <fputc+0x46>
 d70:	46 81       	ldd	r20, Z+6	; 0x06
 d72:	57 81       	ldd	r21, Z+7	; 0x07
 d74:	24 81       	ldd	r18, Z+4	; 0x04
 d76:	35 81       	ldd	r19, Z+5	; 0x05
 d78:	42 17       	cp	r20, r18
 d7a:	53 07       	cpc	r21, r19
 d7c:	44 f4       	brge	.+16     	; 0xd8e <fputc+0x38>
 d7e:	a0 81       	ld	r26, Z
 d80:	b1 81       	ldd	r27, Z+1	; 0x01
 d82:	9d 01       	movw	r18, r26
 d84:	2f 5f       	subi	r18, 0xFF	; 255
 d86:	3f 4f       	sbci	r19, 0xFF	; 255
 d88:	31 83       	std	Z+1, r19	; 0x01
 d8a:	20 83       	st	Z, r18
 d8c:	8c 93       	st	X, r24
 d8e:	26 81       	ldd	r18, Z+6	; 0x06
 d90:	37 81       	ldd	r19, Z+7	; 0x07
 d92:	2f 5f       	subi	r18, 0xFF	; 255
 d94:	3f 4f       	sbci	r19, 0xFF	; 255
 d96:	37 83       	std	Z+7, r19	; 0x07
 d98:	26 83       	std	Z+6, r18	; 0x06
 d9a:	10 c0       	rjmp	.+32     	; 0xdbc <fputc+0x66>
 d9c:	eb 01       	movw	r28, r22
 d9e:	09 2f       	mov	r16, r25
 da0:	18 2f       	mov	r17, r24
 da2:	00 84       	ldd	r0, Z+8	; 0x08
 da4:	f1 85       	ldd	r31, Z+9	; 0x09
 da6:	e0 2d       	mov	r30, r0
 da8:	09 95       	icall
 daa:	89 2b       	or	r24, r25
 dac:	e1 f6       	brne	.-72     	; 0xd66 <fputc+0x10>
 dae:	8e 81       	ldd	r24, Y+6	; 0x06
 db0:	9f 81       	ldd	r25, Y+7	; 0x07
 db2:	01 96       	adiw	r24, 0x01	; 1
 db4:	9f 83       	std	Y+7, r25	; 0x07
 db6:	8e 83       	std	Y+6, r24	; 0x06
 db8:	81 2f       	mov	r24, r17
 dba:	90 2f       	mov	r25, r16
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	08 95       	ret

00000dc6 <__ultoa_invert>:
 dc6:	fa 01       	movw	r30, r20
 dc8:	aa 27       	eor	r26, r26
 dca:	28 30       	cpi	r18, 0x08	; 8
 dcc:	51 f1       	breq	.+84     	; 0xe22 <__ultoa_invert+0x5c>
 dce:	20 31       	cpi	r18, 0x10	; 16
 dd0:	81 f1       	breq	.+96     	; 0xe32 <__ultoa_invert+0x6c>
 dd2:	e8 94       	clt
 dd4:	6f 93       	push	r22
 dd6:	6e 7f       	andi	r22, 0xFE	; 254
 dd8:	6e 5f       	subi	r22, 0xFE	; 254
 dda:	7f 4f       	sbci	r23, 0xFF	; 255
 ddc:	8f 4f       	sbci	r24, 0xFF	; 255
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	af 4f       	sbci	r26, 0xFF	; 255
 de2:	b1 e0       	ldi	r27, 0x01	; 1
 de4:	3e d0       	rcall	.+124    	; 0xe62 <__ultoa_invert+0x9c>
 de6:	b4 e0       	ldi	r27, 0x04	; 4
 de8:	3c d0       	rcall	.+120    	; 0xe62 <__ultoa_invert+0x9c>
 dea:	67 0f       	add	r22, r23
 dec:	78 1f       	adc	r23, r24
 dee:	89 1f       	adc	r24, r25
 df0:	9a 1f       	adc	r25, r26
 df2:	a1 1d       	adc	r26, r1
 df4:	68 0f       	add	r22, r24
 df6:	79 1f       	adc	r23, r25
 df8:	8a 1f       	adc	r24, r26
 dfa:	91 1d       	adc	r25, r1
 dfc:	a1 1d       	adc	r26, r1
 dfe:	6a 0f       	add	r22, r26
 e00:	71 1d       	adc	r23, r1
 e02:	81 1d       	adc	r24, r1
 e04:	91 1d       	adc	r25, r1
 e06:	a1 1d       	adc	r26, r1
 e08:	20 d0       	rcall	.+64     	; 0xe4a <__ultoa_invert+0x84>
 e0a:	09 f4       	brne	.+2      	; 0xe0e <__ultoa_invert+0x48>
 e0c:	68 94       	set
 e0e:	3f 91       	pop	r19
 e10:	2a e0       	ldi	r18, 0x0A	; 10
 e12:	26 9f       	mul	r18, r22
 e14:	11 24       	eor	r1, r1
 e16:	30 19       	sub	r19, r0
 e18:	30 5d       	subi	r19, 0xD0	; 208
 e1a:	31 93       	st	Z+, r19
 e1c:	de f6       	brtc	.-74     	; 0xdd4 <__ultoa_invert+0xe>
 e1e:	cf 01       	movw	r24, r30
 e20:	08 95       	ret
 e22:	46 2f       	mov	r20, r22
 e24:	47 70       	andi	r20, 0x07	; 7
 e26:	40 5d       	subi	r20, 0xD0	; 208
 e28:	41 93       	st	Z+, r20
 e2a:	b3 e0       	ldi	r27, 0x03	; 3
 e2c:	0f d0       	rcall	.+30     	; 0xe4c <__ultoa_invert+0x86>
 e2e:	c9 f7       	brne	.-14     	; 0xe22 <__ultoa_invert+0x5c>
 e30:	f6 cf       	rjmp	.-20     	; 0xe1e <__ultoa_invert+0x58>
 e32:	46 2f       	mov	r20, r22
 e34:	4f 70       	andi	r20, 0x0F	; 15
 e36:	40 5d       	subi	r20, 0xD0	; 208
 e38:	4a 33       	cpi	r20, 0x3A	; 58
 e3a:	18 f0       	brcs	.+6      	; 0xe42 <__ultoa_invert+0x7c>
 e3c:	49 5d       	subi	r20, 0xD9	; 217
 e3e:	31 fd       	sbrc	r19, 1
 e40:	40 52       	subi	r20, 0x20	; 32
 e42:	41 93       	st	Z+, r20
 e44:	02 d0       	rcall	.+4      	; 0xe4a <__ultoa_invert+0x84>
 e46:	a9 f7       	brne	.-22     	; 0xe32 <__ultoa_invert+0x6c>
 e48:	ea cf       	rjmp	.-44     	; 0xe1e <__ultoa_invert+0x58>
 e4a:	b4 e0       	ldi	r27, 0x04	; 4
 e4c:	a6 95       	lsr	r26
 e4e:	97 95       	ror	r25
 e50:	87 95       	ror	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	ba 95       	dec	r27
 e58:	c9 f7       	brne	.-14     	; 0xe4c <__ultoa_invert+0x86>
 e5a:	00 97       	sbiw	r24, 0x00	; 0
 e5c:	61 05       	cpc	r22, r1
 e5e:	71 05       	cpc	r23, r1
 e60:	08 95       	ret
 e62:	9b 01       	movw	r18, r22
 e64:	ac 01       	movw	r20, r24
 e66:	0a 2e       	mov	r0, r26
 e68:	06 94       	lsr	r0
 e6a:	57 95       	ror	r21
 e6c:	47 95       	ror	r20
 e6e:	37 95       	ror	r19
 e70:	27 95       	ror	r18
 e72:	ba 95       	dec	r27
 e74:	c9 f7       	brne	.-14     	; 0xe68 <__ultoa_invert+0xa2>
 e76:	62 0f       	add	r22, r18
 e78:	73 1f       	adc	r23, r19
 e7a:	84 1f       	adc	r24, r20
 e7c:	95 1f       	adc	r25, r21
 e7e:	a0 1d       	adc	r26, r0
 e80:	08 95       	ret

00000e82 <__prologue_saves__>:
 e82:	2f 92       	push	r2
 e84:	3f 92       	push	r3
 e86:	4f 92       	push	r4
 e88:	5f 92       	push	r5
 e8a:	6f 92       	push	r6
 e8c:	7f 92       	push	r7
 e8e:	8f 92       	push	r8
 e90:	9f 92       	push	r9
 e92:	af 92       	push	r10
 e94:	bf 92       	push	r11
 e96:	cf 92       	push	r12
 e98:	df 92       	push	r13
 e9a:	ef 92       	push	r14
 e9c:	ff 92       	push	r15
 e9e:	0f 93       	push	r16
 ea0:	1f 93       	push	r17
 ea2:	cf 93       	push	r28
 ea4:	df 93       	push	r29
 ea6:	cd b7       	in	r28, 0x3d	; 61
 ea8:	de b7       	in	r29, 0x3e	; 62
 eaa:	ca 1b       	sub	r28, r26
 eac:	db 0b       	sbc	r29, r27
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	f8 94       	cli
 eb2:	de bf       	out	0x3e, r29	; 62
 eb4:	0f be       	out	0x3f, r0	; 63
 eb6:	cd bf       	out	0x3d, r28	; 61
 eb8:	09 94       	ijmp

00000eba <__epilogue_restores__>:
 eba:	2a 88       	ldd	r2, Y+18	; 0x12
 ebc:	39 88       	ldd	r3, Y+17	; 0x11
 ebe:	48 88       	ldd	r4, Y+16	; 0x10
 ec0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec8:	9b 84       	ldd	r9, Y+11	; 0x0b
 eca:	aa 84       	ldd	r10, Y+10	; 0x0a
 ecc:	b9 84       	ldd	r11, Y+9	; 0x09
 ece:	c8 84       	ldd	r12, Y+8	; 0x08
 ed0:	df 80       	ldd	r13, Y+7	; 0x07
 ed2:	ee 80       	ldd	r14, Y+6	; 0x06
 ed4:	fd 80       	ldd	r15, Y+5	; 0x05
 ed6:	0c 81       	ldd	r16, Y+4	; 0x04
 ed8:	1b 81       	ldd	r17, Y+3	; 0x03
 eda:	aa 81       	ldd	r26, Y+2	; 0x02
 edc:	b9 81       	ldd	r27, Y+1	; 0x01
 ede:	ce 0f       	add	r28, r30
 ee0:	d1 1d       	adc	r29, r1
 ee2:	0f b6       	in	r0, 0x3f	; 63
 ee4:	f8 94       	cli
 ee6:	de bf       	out	0x3e, r29	; 62
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	cd bf       	out	0x3d, r28	; 61
 eec:	ed 01       	movw	r28, r26
 eee:	08 95       	ret

00000ef0 <_exit>:
 ef0:	f8 94       	cli

00000ef2 <__stop_program>:
 ef2:	ff cf       	rjmp	.-2      	; 0xef2 <__stop_program>
